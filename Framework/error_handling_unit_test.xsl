<?xml version="1.0"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" xmlns:str="http://exslt.org/strings">
	<xsl:output omit-xml-declaration="yes"	method="text"/>

	<xsl:variable name="ASSERT_OPTIONS">
		<xsl:text>&#38;
                            comment, ifail, statement,a_name,b_name,filename,line,fmt</xsl:text>
	</xsl:variable>
	<xsl:variable name="ASSERT_OPTIONS_PRIMITIVE">
		<xsl:text>&#38;
                            filename,line,comment, ifail</xsl:text>
	</xsl:variable>
    <xsl:variable name="ASSERT_OPTIONS_DECLARATION"><xsl:text/>
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail<xsl:text/>
    </xsl:variable>
    <xsl:variable name="ASSERT_OPTIONS_DECLARATION_PRIMITIVE"><xsl:text/>
        character(len=*), intent(in), optional :: filename,comment
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail<xsl:text/>
    </xsl:variable>
	<xsl:variable name="ASSERT_OPTIONS_TYPEDECLARATION">
#ifndef FC_NO_ALLOCATABLE_CHARACTER
        character(:), allocatable :: statement, comment, filename
#else
        character(MAX_CHARACTER_LEN) :: statement = "", comment = "", filename = ""
#endif
        integer :: line = -1
#ifndef FC_NO_ALLOCATABLE_CHARACTER
        <xsl:text/>character(:), allocatable :: a_name,b_name,extra_name
#else
        <xsl:text/>character(MAX_CHARACTER_LEN) :: a_name = "",b_name = "",extra_name = ""
#endif
        logical :: show_difference_marks = .false.
    </xsl:variable>
	<xsl:template name="assert-options-typeassignment">
		<xsl:param name="condition"/>
		<xsl:param name="condition-str"/>
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( <xsl:value-of select="$condition"/> )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, <xsl:value-of select="$condition-str"/> )
            
            ! TODO: check class invariants info<xsl:text/>
            
    </xsl:template>
	
	<!-- MAIN -->
	
	<xsl:template match="unittest">
<xsl:text/>! ERROR_HANDLING_UNIT_TEST
! 
!   Collection of wrapper around commonly used routines that need to check 
!   some condition.
! 
! HISTORY
! 
!   20110217 KP - Initial version
!   20110412 KP - Ported to auto-generated system
!   20111107 KP - Improve reporting
!                 NOTE@self: the distinction between runtime check and unit test test is nice.
!   20111108 KP - Changing the info_message prototype proved to be a good move for the report functions
!   20111109 KP - Code cleanup and improved documentation
!               - Changed assert_equal to assert_eq to conform to the common literal names for the comparisons
!               - Added assert_XX where XX in { NE, LT, LE, GT, GE }
!   20111110 KP - Character strings are left aligned
!               - Optional fmt argument to modify the output format
!               - info%show_difference_marks allows to show/hide the difference marks
!   <xsl:value-of select="$isoD"/> (KP) - Re-generated (make autogenerated)
! 
! AUTHOR
! 
!   Koen Poppe, Department of Computer Science,
!   Katholieke Universiteit Leuven, Celestijnenlaan 200A,
!   B-3001 Heverlee, Belgium
!   Email: Koen.Poppe@cs.kuleuven.be
!
module error_handling_unit_test
    use error_handling_error
    ! use design_by_contract
    implicit none
    private
    save

    !--------------------------------------------------------------------------
    ! Unit testing
    !--------------------------------------------------------------------------
    
    ! Primitives
    public :: unit_test_reset
    public :: unit_test_results
    public :: write_unit_test_report
    
    ! Test statistics
    integer :: OUTPUT_WIDTH = 132 ! Maximal width of the output
    integer :: ntest = -1, nfail = -1
    character(len=32) :: module_name = ""
    
    ! Error info types
    type, extends(message_error), public :: unit_test_error
        <xsl:value-of select="$ASSERT_OPTIONS_TYPEDECLARATION"/>
    end type unit_test_error
<xsl:for-each select="exsl:node-set($ranks)/*[ . &lt; 3]">
    type, extends(unit_test_error) :: unit_test_error_rank<xsl:value-of select="."/>
        logical<xsl:call-template name="rank-specification"><xsl:with-param name="rank" select="."/></xsl:call-template><xsl:if test=". &gt; 0">, allocatable</xsl:if> :: diff
#ifndef FC_NO_ALLOCATABLE_CHARACTER
        character(:)<xsl:call-template name="rank-specification"><xsl:with-param name="rank" select="."/></xsl:call-template>, allocatable :: a,b, extra
#else
        character(len=MAX_CHARACTER_LEN)<xsl:call-template name="rank-specification"><xsl:with-param name="rank" select="."/></xsl:call-template>, allocatable :: a,b, extra
#endif
    contains
        procedure :: info_message => unit_test_error_info_message_rank<xsl:value-of select="."/>
    end type unit_test_error_rank<xsl:value-of select="."/>
</xsl:for-each>

    !--------------------------------------------------------------------------
    ! Unit testing primitives
    !--------------------------------------------------------------------------
    
    public :: assert
    public :: assertion_fails
    interface assert
        module procedure assert_logical
    end interface assert
<xsl:call-template name="interfaces"/>
contains<xsl:text/>

    !--------------------------------------------------------------------------
    ! Unit testing
    !--------------------------------------------------------------------------
    
    ! Reset the test results
    subroutine unit_test_reset(name)
        character(len=*),intent(in), optional :: name
        ntest = 0
        nfail = 0
        module_name = optional_character( name, "" )
    end subroutine unit_test_reset
    
    ! Returns the results of the test so far.
    subroutine unit_test_results(nb_passed,nb_failed,nb_tests)
        integer, intent( out ), optional :: nb_passed, nb_failed, nb_tests
        if( present( nb_passed ) ) nb_passed = ntest-nfail
        if( present( nb_failed ) ) nb_failed = nfail
        if( present( nb_tests  ) ) nb_tests  = ntest
    end subroutine unit_test_results
    
    ! Write the test report in a fashion compatible to the test warnings.
    subroutine write_unit_test_report()
        integer :: nb_failed, nb_tests
        call unit_test_results(nb_failed=nb_failed, nb_tests=nb_tests)
        if( nb_failed == 0 ) then
            write(unit=*,fmt="(A)",advance="no") "     [OK] "
        else
            write(unit=*,fmt="(A)",advance="no") "     [??] "
        end if
        write(unit=*,fmt="(I0,A,I0,3A)") &amp;
            nb_tests-nb_failed, " of ", nb_tests, " tests passed (", trim(module_name), ")"
    end subroutine write_unit_test_report

    !--------------------------------------------------------------------------
    ! Primitives
    !--------------------------------------------------------------------------
    
    subroutine assertion_failed()
        if( ntest >= 0 ) then
            ntest = ntest + 1
            nfail = nfail + 1
        end if
    end subroutine assertion_failed
    
    subroutine assertion_succeeded()
        if( ntest >= 0 ) then
            ntest = ntest + 1
        end if
    end subroutine assertion_succeeded
    
    subroutine assert_logical( expression, <xsl:value-of select="$ASSERT_OPTIONS"/> )
        logical, intent(in) :: expression
        <xsl:value-of select="$ASSERT_OPTIONS_DECLARATION"/>
        
        call assert_eq( expression, .true., <xsl:value-of select="$ASSERT_OPTIONS"/> )
    end subroutine assert_logical
    
    function assertion_fails( expression, <xsl:value-of select="$ASSERT_OPTIONS"/> ) result( failed )
        logical, intent(in) :: expression
        <xsl:value-of select="$ASSERT_OPTIONS_DECLARATION"/>
        logical :: failed
        
        call assert_logical( expression, <xsl:value-of select="$ASSERT_OPTIONS"/> )
        failed = is_error( ifail )
        
    end function assertion_fails

    !--------------------------------------------------------------------------
    ! Reporting
    !--------------------------------------------------------------------------
    
    ! The first common line of each report: information about where the test failed
    subroutine report_header( info, unit, prefix, suffix, recursion )
        class(unit_test_error), intent(in) :: info
        integer, intent(in) :: unit
        character(len=*), intent(in) :: prefix, suffix
        logical, intent(in), optional :: recursion
        
        ! Report this only at the outer most level
        if( optional_logical( recursion,.false. ) ) return
            
        write(unit=unit,fmt="(A)",advance="no") prefix
        
        if( len_trim(module_name) > 0 ) then
            write(unit=unit,fmt="(3A)",advance="no") "[", trim(module_name), "] "
        end if
        
        if( ntest >= 0 ) then
            write(unit=unit,fmt="(A,I0)",advance="no") "Test ", ntest
        else
            write(unit=unit,fmt="(A)",advance="no") "Run-time check"
        end if
        
#ifndef FC_NO_ALLOCATABLE_CHARACTER
        if( allocated(info%filename) ) then
#endif
            if( len_trim(info%filename) > 0 ) then
                write(unit=unit,fmt="(2A)",advance="no") " in ", trim(info%filename)
            end if
#ifndef FC_NO_ALLOCATABLE_CHARACTER
        end if
#endif
        
        if( info%line > 0 ) then
            write(unit=unit,fmt="(A,I0)",advance="no") "@", info%line
        end if
        
#ifndef FC_NO_ALLOCATABLE_CHARACTER
        if( allocated(info%statement) ) then
#endif
            if( len_trim(info%statement) > 0 ) then
                write(unit=unit,fmt="(2A)",advance="no") ": ", trim(info%statement)
            end if
#ifndef FC_NO_ALLOCATABLE_CHARACTER
        end if
#endif
#ifndef FC_NO_ALLOCATABLE_CHARACTER
        if( allocated(info%comment) ) then
#endif
            if( len_trim(info%comment) > 0 ) then
                write(unit=unit,fmt="(3A)",advance="no") " (", trim(info%comment), ")"
            end if
#ifndef FC_NO_ALLOCATABLE_CHARACTER
        end if
#endif
            
        write(unit=unit,fmt="(A)") suffix
        
    end subroutine report_header
    
    ! For arrays: report how many elements differ
    subroutine report_header_nb_differences( unit,prefix,suffix,  nb_diff,nb, recursion )
        integer, intent(in) :: unit
        character(len=*), intent(in) :: prefix, suffix
        integer, intent(in) :: nb_diff, nb
        logical, intent(in), optional :: recursion
        
        ! Report this only at the outer most level
        if( optional_logical( recursion,.false. ) ) return
        
        if( nb_diff == nb .and. nb == 1 ) then
            ! Do not report, just two different scalars
        else if( nb_diff == nb ) then
            write(unit=unit,fmt="(2A,I0,2A)") prefix, &amp;
                "All the ", nb, " elements differ: ", suffix
        else
            write(unit=unit,fmt="(A,I0,A,I0,2A)") prefix, &amp;
                nb_diff, " of the ", nb, " elements differs: ", suffix
        end if
        
    end subroutine report_header_nb_differences
    
    ! Common routine for the format string of the report's output
    subroutine prepare_format_string( fmt_str, nb, name_width, element_width, sep )
        character(len=*), intent(out) :: fmt_str
        integer, intent(in) :: nb, name_width, element_width
        character(len=*), intent(in) :: sep
        
        if( nb == 1 ) then
            write(unit=fmt_str,fmt="(2(A,I0),A)") &amp;
                "(A,A",name_width,",A,A",element_width,",2A)"
        else
            write(unit=fmt_str,fmt="(2(A,I0),A,I0,3A,I0,A)") &amp;
                "(A,A",name_width,",A,A",element_width,",",nb-1,"('", sep, "',A",element_width,"),2A)"
        end if
        
    end subroutine prepare_format_string
    
    ! Report details about the differences between rank-1 arrays. 
    ! The optional arguments can be used to overwrite those stored in the &lt;info&gt; argument.
    subroutine report_details_rank1( info, unit, prefix, suffix, diff, a, b, extra, &amp;
                    a_name, b_name,extra_name, idx_row, recursion )
        class(unit_test_error), intent(in) :: info
        integer, intent(in) :: unit
        character(len=*), intent(in) :: prefix, suffix
        
        logical, dimension(:), intent(in) :: diff
        character(len=*), dimension(:), intent(in) :: a, b
        character(len=*), dimension(:), intent(in), optional :: extra
        
        character(len=*), intent(in), optional :: a_name, b_name, extra_name
        character(len=*), dimension(:), intent(in), optional :: idx_row
        logical, intent(in), optional :: recursion
        
        ! Local variables
        character(len=3), parameter :: eqs = " = ", sep = " | ", blk = "   "
        integer, dimension(:), allocatable :: diff_idx
        integer :: i,j, element_width, nb, nb_diff, max_elements_per_row, row, idx, name_width
        character(len=40) :: fmt_str, la_name, lb_name, trailing, lextra_name
        character(len=len(blk)) :: sep_or_blk
        character(len=len(a(1))), dimension(size(a)) :: diff_str, the_row
        
        ! Get the actual names and their maximum width
        la_name     = optional_allocatable_character( a_name,     info%a_name,    "a" )
        lb_name     = optional_allocatable_character( b_name,     info%b_name,    "b" )
        lextra_name = optional_allocatable_character( extra_name, info%extra_name, "" )
        name_width = max(1,len_trim(la_name),len_trim(lb_name),len_trim(lextra_name))
        
        ! Some statistics
        element_width = len(a(1))
        nb = size(diff)
        nb_diff = count(diff)
        
        ! Common header
        call report_header( info, unit, prefix, suffix, recursion )
        call report_header_nb_differences( unit,prefix,suffix, nb_diff,nb, recursion )
        
        ! Get the indexes of the differences the PACK instruction masks 1,...,nb
        ! with the diff logical array and thus returns exactly those indexes.
        allocate(diff_idx(nb_diff))
        diff_idx = pack( (/ (i,i=1,nb) /), diff )
        
        ! Prepare the difference strings: put "-" where they are equal, "^" when they differ
        diff_str = " "
        do i=1,nb_diff
            idx = diff_idx(i)
            do j=1,len(a(idx))
                if( a(idx)(j:j) /= b(idx)(j:j) ) then
                    diff_str(idx)(j:j) = "^"
                else
                    diff_str(idx)(j:j) = "-"
                end if
            end do
        end do
        
        ! How many elements can we show on one row?
        max_elements_per_row = (OUTPUT_WIDTH-name_width-len(prefix)-len(suffix)-len(eqs))/ &amp;
            (element_width+len(sep)) ! Integer division -&lt; floored
        
        ! Case 1: report all the differences, without compressing the results
        if( optional_logical( recursion,.false.) .or. (nb &lt;= max_elements_per_row .and. .not. present(idx_row)) ) then
            ! Possibly, not all elements fit and the output is truncated
            if( nb &gt; max_elements_per_row ) then
                nb = max_elements_per_row
                write(unit=trailing,fmt="(2A)") sep, "..."
            else
                trailing = ""
            end if
            
            ! Prepare format string and output the values of a and b
            call prepare_format_string( fmt_str, nb, name_width, element_width, sep )
            write(unit=unit,fmt=fmt_str) prefix, trim(la_name), eqs, a(1:nb), trim(trailing), suffix
            write(unit=unit,fmt=fmt_str) prefix, trim(lb_name), eqs, b(1:nb), trim(trailing), suffix
            
            ! Idemdito for the differences, but now without sep
            if( info%show_difference_marks ) then
                call prepare_format_string( fmt_str, nb, name_width, element_width, blk )
                write(unit=unit,fmt=fmt_str) prefix, "", blk, diff_str(1:nb), trim(trailing), suffix
            end if
            
            ! If needed, also do this for extra
            if( present(extra) ) then
                call prepare_format_string( fmt_str, nb, name_width, element_width, sep )
                write(unit=unit,fmt=fmt_str) prefix, trim(lextra_name), eqs, extra(1:nb), trim(trailing), suffix
            end if
            return
        end if
        
        ! Case 2: report the differences selectively, by only showing the columns that differ
        do row=0,4
            if( .not. present(extra) .and. row == 4 ) then
                exit ! No extra -&gt; stop the loop here
            end if
            if( row /= 3 .or. info%show_difference_marks ) then
                write(unit=unit,fmt="(A)",advance="no") prefix
                
                ! Write the name and assign the contents of the current row to &lt;the_row&gt;
                write(unit=fmt_str,fmt="(2(A,I0),A)") "(A",name_width,",A",len(eqs),")"
                select case( row )
                    case( 0 ) ! Indexes
                        if( name_width &lt; 5 ) then
                            write(unit=unit,fmt=fmt_str,advance="no") "idx", eqs
                        else
                            write(unit=unit,fmt=fmt_str,advance="no") "index", eqs                        
                        end if
                    
                        if( present( idx_row ) ) then
                            the_row = idx_row
                        else
                            the_row = " "
                            write(unit=fmt_str,fmt="(A,I0,A)") "(I", element_width, ")"
                            do i=1,nb_diff
                                write(unit=the_row(diff_idx(i)),fmt=fmt_str) diff_idx(i)
                            end do
                        end if
                    case( 1 ) ! a
                        write(unit=unit,fmt=fmt_str,advance="no") trim(la_name), eqs
                        the_row = a
                    case( 2 ) ! b
                        write(unit=unit,fmt=fmt_str,advance="no") trim(lb_name), eqs
                        the_row = b
                    case( 3 ) ! differences
                        write(unit=unit,fmt=fmt_str,advance="no") "",""
                        the_row = diff_str
                    case( 4 ) ! extra
                        write(unit=unit,fmt=fmt_str,advance="no") lextra_name, eqs
                        the_row = extra
                end select
            
                ! The seperator in between the columns
                if( row == 3 ) then
                    sep_or_blk = blk
                else
                    sep_or_blk = sep
                end if
            
                ! Report the rows
                idx = 0
                do i=1,min(nb_diff,max_elements_per_row)
                    if( i&gt;1 ) then
                        write(unit=unit,fmt="(A)",advance="no") sep_or_blk
                    end if
                
                    ! Were there elements in between?
                    if( diff_idx(i) &gt; idx+1 ) then
                        write(unit=unit,fmt="(2A)",advance="no") ".", sep_or_blk
                    end if
            
                    ! Element
                    idx = diff_idx(i)
                    write(unit=unit,fmt="(A)",advance="no") the_row(idx)
                end do
                if( nb_diff &gt; max_elements_per_row ) then
                    write(unit=unit,fmt="(2A)",advance="no") sep_or_blk, "..."
                else if( diff_idx(min(nb_diff,max_elements_per_row)) &lt; len(eqs) ) then
                    write(unit=unit,fmt="(2A)",advance="no") sep_or_blk, "."
                end if
            
                write(unit=unit,fmt="(A)",advance="yes") suffix
            end if
        end do
        
    end subroutine report_details_rank1
    
    ! Analogue of report_details_rank1, but for rank-2 arrays
    subroutine report_details_rank2( info, unit, prefix, suffix, diff, a,b,extra, &amp;
                    a_name,b_name,extra_name, recursion )
        class(unit_test_error), intent(in) :: info
        integer, intent(in) :: unit
        character(len=*), intent(in) :: prefix, suffix
        logical, dimension(:,:), intent(in) :: diff
        character(len=*), dimension(:,:), intent(in) :: a,b
        
        character(len=*), dimension(:,:), intent(in), optional :: extra
        character(len=*), intent(in), optional :: a_name, b_name, extra_name
        logical, intent(in), optional :: recursion
        
        ! Local variables
        character(len=40) :: a_rowstr, b_rowstr, fmt_str
        integer :: row, prev_row
        
        ! Common header
        call report_header( info, unit, prefix, suffix, recursion )
        call report_header_nb_differences( unit,prefix,suffix, count(diff),size(diff), recursion ) 
        
        ! Boolean overview of the array and its differences
        do row=1,size(a,1)
            write(unit=unit,fmt="(A,100L2)",advance="no") prefix, .not. diff(row,:) ! Assuming less than 100 elements ...
            write(unit=unit,fmt="(A)") suffix
        end do
        
        ! Prepare the format string for the indexing of the rows of a and b
        write(unit=fmt_str,fmt="(A,I0,A)") "(2A,I",ceiling(log10(real(size(a,1)))),",A)"
        
        ! Iterate over all rows, keeping track of the previous row to indicate supressed rows
        prev_row = 0
        do row=1,size(a,1)
            ! Only report rows with differences
            if( any(diff(row,:)) ) then
                ! Indicate that equal rows were supressed
                if( row /= prev_row+1 ) then
                    write(unit=unit,fmt="(3A)") prefix, "(equal rows suppressed)", suffix
                end if
                
                ! Name overwrites for the indexed rows
                write(unit=a_rowstr,fmt=fmt_str) trim(optional_allocatable_character(a_name, info%a_name, "a" )), "(", row, ",:)"
                write(unit=b_rowstr,fmt=fmt_str) trim(optional_allocatable_character(b_name, info%b_name, "b" )), "(", row, ",:)"
                
                if( present(extra) ) then
                    call report_details_rank1( info,unit,prefix,suffix, diff(row,:),a(row,:),b(row,:),extra(row,:), &amp;
                                a_name=a_rowstr,b_name=b_rowstr, recursion=.true., &amp;
                                extra_name=optional_allocatable_character( extra_name, info%extra_name, "extra" ) )
                    ! Extra separating line to avoid confusion in case there was extra information
                    if( row &lt; size(a,1) ) then
                        write(unit=unit,fmt="(3A)") prefix, repeat("-",len_trim(a_rowstr)), suffix
                    end if
                else
                    call report_details_rank1( info,unit,prefix,suffix, diff(row,:),a(row,:),b(row,:), &amp;
                                a_name=a_rowstr,b_name=b_rowstr, recursion=.true. )
                end if
                prev_row = row
            end if
        end do
        if( size(a,1) /= prev_row ) then
            write(unit=unit,fmt="(3A)") prefix, "(equal rows suppressed)", suffix
        end if
        
    end subroutine report_details_rank2

    !--------------------------------------------------------------------------
    ! Type bound procedures
    !--------------------------------------------------------------------------
    ! TODO: better way of handling the optionally allocated info%extra?
    
    subroutine unit_test_error_info_message_rank0( info, unit, prefix, suffix )
        class(unit_test_error_rank0), intent(in) :: info
        integer, intent(in) :: unit
        character(len=*), intent(in) :: prefix, suffix
        
        if( allocated(info%extra) ) then
            call report_details_rank1( info, unit, prefix, suffix, &amp;
                    (/ info%diff /), (/ info%a /), (/ info%b /), (/ info%extra /) )
        else
            call report_details_rank1( info, unit, prefix, suffix, &amp;
                    (/ info%diff /), (/ info%a /), (/ info%b /) )
        end if
        
    end subroutine unit_test_error_info_message_rank0
    
    subroutine unit_test_error_info_message_rank1( info, unit, prefix, suffix )
        class(unit_test_error_rank1), intent(in) :: info
        integer, intent(in) :: unit
        character(len=*), intent(in) :: prefix, suffix
        
        if( allocated(info%extra) ) then
            call report_details_rank1( info, unit, prefix, suffix, &amp;
                    info%diff, info%a, info%b, info%extra )
        else
            call report_details_rank1( info, unit, prefix, suffix, &amp;
                    info%diff, info%a, info%b )
        end if
        
    end subroutine unit_test_error_info_message_rank1
    
    subroutine unit_test_error_info_message_rank2( info, unit, prefix, suffix )
        class(unit_test_error_rank2), intent(in) :: info
        integer, intent(in) :: unit
        character(len=*), intent(in) :: prefix, suffix
        
        if( allocated(info%extra) ) then
            call report_details_rank2( info, unit, prefix, suffix, &amp;
                    info%diff, info%a, info%b, info%extra )
        else
            call report_details_rank2( info, unit, prefix, suffix, &amp;
                    info%diff, info%a, info%b )
        end if
        
    end subroutine unit_test_error_info_message_rank2<xsl:text/>
<xsl:call-template name="procedures"/>

    !--------------------------------------------------------------------------
    ! Miscellaneous
    !--------------------------------------------------------------------------
    
    recursive function assert_array_shape( shape_a,shape_b, <xsl:value-of select="$ASSERT_OPTIONS"/> ) result( equal_shape )
        integer, dimension(:), intent(in) :: shape_a, shape_b
        <xsl:value-of select="$ASSERT_OPTIONS_DECLARATION"/>
        logical :: equal_shape
        
        equal_shape = .false. 
        if( size(shape_a) /= size(shape_b) ) then
            call assert_eq( size(shape_a), size(shape_b), statement=statement, &amp; <!-- DEPENDS ON ASSERT_OPTIONS -->
                    a_name=a_name, b_name=b_name, filename=filename, line=line, &amp;
                    comment=optional_character(comment,"") // "ranks differ", ifail=ifail, fmt=fmt )
            return
        end if
        if( any(shape_a /= shape_b) ) then
            ! Cannot cause infinite recursion because the arrays have the same size
            call assert_eq( shape_a, shape_b, statement=statement, &amp; <!-- DEPENDS ON ASSERT_OPTIONS -->
                    a_name="shape(" // optional_character(a_name,"a") // ")", &amp;
                    b_name="shape(" // optional_character(b_name,"b") // ")", filename=filename, line=line, &amp;
                    comment=trim(optional_character(comment)) // " sizes differ", ifail=ifail, fmt=fmt )
            return
        end if
        equal_shape = .true.
        
    end function assert_array_shape
    
    function optional_logical( a, default )
        logical, intent(in), optional :: a
        logical, intent(in) :: default
        logical :: optional_logical
        if( present(a) ) then
            optional_logical = a
        else
            optional_logical = default
        end if
    end function optional_logical
    function optional_integer( a, default )
        integer, intent(in), optional :: a
        integer, intent(in) :: default
        integer :: optional_integer
        if( present(a) ) then
            optional_integer = a
        else
            optional_integer = default
        end if
    end function optional_integer
    function optional_character( a, default ) result( name )
        character(len=*), intent(in), optional :: a, default
        character(:), allocatable :: name
        name = optional_allocatable_character( a, default=default )
        
    end function optional_character
    function optional_allocatable_character( a, b, default ) result( name )
        character(len=*), intent(in), optional :: a, default
#ifndef FC_NO_ALLOCATABLE_CHARACTER
        character(:), allocatable, intent(in), optional :: b
#else
        character(len=*), intent(in), optional :: b
#endif
        character(len=40) :: name
        
        name = ""
        if( present(default) ) then
            name = default
        end if
        if( present(b) ) then
#ifndef FC_NO_ALLOCATABLE_CHARACTER
            if( allocated(b) ) then
                name = b
            end if
#else
            if( len_trim(b) > 0 ) then
                name = b
            end if
#endif
        end if
        if( present(a) ) then
            if( len_trim(a) > 0 ) then
                name = a
            end if
        end if
        
    end function optional_allocatable_character
    
    pure function fmt_width( fmt ) result( width )
        character(len=*), intent(in) :: fmt
        integer :: width
        
        integer :: start_width, end_width
        
        start_width = scan(fmt,"FILESAN",back=.true.) + 1
        end_width = scan(fmt,".)") - 1
        if( end_width &lt; 0 ) end_width = len_trim(fmt)
        
        read(unit=fmt(start_width:end_width),fmt=*) width
        
    end function fmt_width

end module error_handling_unit_test<xsl:text/>
	</xsl:template>
	
	<!-- TEMPLATES -->
	
	<xsl:template name="assert-operator">
	    <xsl:variable name="op" select="str:replace(name(..),'assert_','')"/>
	    <xsl:choose>
	        <xsl:when test="$op = 'eq'">
	            <xsl:choose>
					<xsl:when test="@type = 'logical'"><xsl:text>.eqv.</xsl:text></xsl:when>
					<xsl:otherwise><xsl:text>==</xsl:text></xsl:otherwise>
				</xsl:choose>
	        </xsl:when>
	        <xsl:when test="$op = 'ne'">
	             <xsl:choose>
    				<xsl:when test="@type = 'logical'"><xsl:text>.neqv.</xsl:text></xsl:when>
    				<xsl:otherwise><xsl:text>/=</xsl:text></xsl:otherwise>
    			</xsl:choose>
	        </xsl:when>
	        <xsl:when test="$op = 'lt'"><xsl:text>&lt;</xsl:text></xsl:when>
	        <xsl:when test="$op = 'le'"><xsl:text>&lt;=</xsl:text></xsl:when>
	        <xsl:when test="$op = 'gt'"><xsl:text>&gt;</xsl:text></xsl:when>
	        <xsl:when test="$op = 'ge'"><xsl:text>&gt;=</xsl:text></xsl:when>
	        <xsl:otherwise>
	            [[unknown operator '<xsl:value-of select="$op"/>']]
	        </xsl:otherwise>
	    </xsl:choose>
	</xsl:template>

	<xsl:template match="assert_eq|assert_ne|assert_lt|assert_le|assert_ge|assert_gt">
		<xsl:param name="version"/>
		<xsl:for-each select="exsl:node-set($version)">
			<xsl:variable name="rank"><xsl:value-of select="@rank"/></xsl:variable>
			<xsl:variable name="is">
				<xsl:for-each select="exsl:node-set($ranks)/*[ 0 &lt; . and . &lt;= $rank]">
					<xsl:text/><xsl:if test=". &gt; 1">,</xsl:if>i<xsl:value-of select="."/><xsl:text/>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="condition_operator"><xsl:call-template name="assert-operator"/></xsl:variable>
    recursive subroutine <xsl:call-template name="name-mangler"/>( a, b, <xsl:value-of select="$ASSERT_OPTIONS"/> )
        <xsl:value-of select="@type"/><xsl:call-template name="rank-specification"/>, intent(in) :: a,b<xsl:text/>
        <xsl:value-of select="$ASSERT_OPTIONS_DECLARATION"/>
        
        ! Local variables
        character(:)<xsl:call-template name="deferred-rank-specification-equal"/>
        <xsl:text/>, allocatable :: a_str, b_str<xsl:text/>
        character(len=40) :: lfmt
        integer :: lfmt_width
        <xsl:if test="$rank &gt; 0"><xsl:text/>
        integer :: <xsl:value-of select="$is"/>
        </xsl:if>
        type(unit_test_error_rank<xsl:value-of select="$rank"/>) :: info
        <xsl:call-template name="assert-array-shape"/>
        if( <xsl:if test="$rank &gt; 0">all( </xsl:if>a <xsl:value-of select="$condition_operator"/> b<xsl:if test="$rank &gt; 0"> )</xsl:if> ) then
            call assertion_succeeded()
        else<xsl:text/>
            ! Export the data as character string<xsl:text/>
            lfmt = "(<xsl:call-template name="type-format-w-optional"/>)"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str<xsl:call-template name="shape-specification-equal"/>,source=repeat(" ",lfmt_width))
            allocate(b_str<xsl:call-template name="shape-specification-equal"/>,source=repeat(" ",lfmt_width))
            <xsl:choose>
                <xsl:when test="$rank = 0">
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b<xsl:text/>
                <xsl:if test="@type = 'character(len=*)'">
            ! Left-align character strings
            a_str = adjustl( a_str )
            b_str = adjustl( b_str )<xsl:text/>
                </xsl:if>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:for-each select="exsl:node-set($ranks)/*[ 0 &lt; . and . &lt;= $rank]">
            do i<xsl:value-of select="."/>=1,size(a,<xsl:value-of select="."/>)<xsl:text/>
                    </xsl:for-each>
                write(unit=a_str(<xsl:value-of select="$is"/>),fmt=lfmt) a(<xsl:value-of select="$is"/>)
                write(unit=b_str(<xsl:value-of select="$is"/>),fmt=lfmt) b(<xsl:value-of select="$is"/>)<xsl:text/>
                    <xsl:if test="@type = 'character(len=*)'">
                ! Left-align character strings
                a_str(<xsl:value-of select="$is"/>) = adjustl( a_str(<xsl:value-of select="$is"/>) )
                b_str(<xsl:value-of select="$is"/>) = adjustl( b_str(<xsl:value-of select="$is"/>) )<xsl:text/>
                    </xsl:if>
                    <xsl:for-each select="exsl:node-set($ranks)/*[ 0 &lt; . and . &lt;= $rank]">
            end do<xsl:text/>
                    </xsl:for-each>
                </xsl:otherwise>
            </xsl:choose>
            
            <xsl:call-template name="assert-options-typeassignment">
                <xsl:with-param name="condition">a <xsl:value-of select="$condition_operator"/> b</xsl:with-param>
                <xsl:with-param name="condition-str">trim(info%a_name) // " <xsl:value-of select="$condition_operator"/> " // trim(info%b_name)</xsl:with-param>
            </xsl:call-template>
            <xsl:if test="$condition_operator = '==' or $condition_operator = '/=' or $condition_operator = '.eqv.' or $condition_operator = '.neqv.'">
            
            ! Populate additional information
            info%show_difference_marks = .true.
            </xsl:if>
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine <xsl:call-template name="name-mangler"/>
		</xsl:for-each>
	</xsl:template>
	
	<xsl:template name="real-type">
<xsl:value-of select="str:replace(@type,'complex','real')"/>
	</xsl:template>
	
	<xsl:template match="abserr">
		<xsl:param name="version"/>
		<xsl:for-each select="exsl:node-set($version)">
			<xsl:variable name="rank"><xsl:value-of select="@rank"/></xsl:variable>
    function <xsl:call-template name="name-mangler"/>( a,b ) result( abs_err )
        <xsl:value-of select="@type"/><xsl:call-template name="rank-specification"/>, intent(in) :: a
        <xsl:value-of select="@type"/><xsl:call-template name="rank-specification-equal"/>, intent(in) :: b
        <xsl:call-template name="real-type"/><xsl:call-template name="rank-specification-equal"/> :: abs_err<xsl:text/>
        <xsl:choose>
        	<xsl:when test="@rank = 0">
        if( a/=b ) then
            abs_err = abs(a-b)
        else
            abs_err = 0
        end if</xsl:when>
        <xsl:otherwise>
        where( a/=b )
            abs_err = abs(a-b)
        elsewhere
            abs_err = 0
        end where</xsl:otherwise>
        </xsl:choose>
    end function <xsl:call-template name="name-mangler"/>
    </xsl:for-each>
	</xsl:template>

	<xsl:template match="assert_abserr">
		<xsl:param name="version"/>
		<xsl:call-template name="assert_err">
			<xsl:with-param name="version" select="$version"/>
			<xsl:with-param name="error_f">abserr</xsl:with-param>
			<xsl:with-param name="err_tol">epsabs</xsl:with-param>
		</xsl:call-template>
	</xsl:template>
	<xsl:template match="assert_relerr">
		<xsl:param name="version"/>
		<xsl:call-template name="assert_err">
			<xsl:with-param name="version" select="$version"/>
			<xsl:with-param name="error_f">abserr</xsl:with-param>
			<xsl:with-param name="err_tol">epsabs</xsl:with-param>
		</xsl:call-template>
	</xsl:template>
	
	<xsl:template name="assert_err">
		<xsl:param name="version"/>
		<xsl:param name="error_f"/>
		<xsl:param name="err_tol"/>
		<xsl:for-each select="exsl:node-set($version)">
			<xsl:variable name="rank"><xsl:value-of select="@rank"/></xsl:variable>
			<xsl:variable name="is">
				<xsl:for-each select="exsl:node-set($ranks)/*[ 0 &lt; . and . &lt;= $rank]">
					<xsl:text/><xsl:if test=". &gt; 1">,</xsl:if>i<xsl:value-of select="."/><xsl:text/>
				</xsl:for-each>
			</xsl:variable>
    subroutine <xsl:call-template name="name-mangler"/>( a, b, <xsl:value-of select="$err_tol"/>, <xsl:value-of select="$ASSERT_OPTIONS"/> )
        <xsl:value-of select="@type"/><xsl:call-template name="rank-specification"/>, intent(in) :: a,b
        <xsl:call-template name="real-type"/>, intent(in) :: <xsl:value-of select="$err_tol"/><xsl:text/>
        <xsl:value-of select="$ASSERT_OPTIONS_DECLARATION"/>
        
        ! Local variables
        character(:)<xsl:call-template name="deferred-rank-specification-equal"/>
        <xsl:text/>, allocatable :: a_str, b_str, e_str<xsl:text/>
        character(len=40) :: lfmt
        integer :: lfmt_width
        <xsl:call-template name="real-type"/><xsl:call-template name="rank-specification-equal"/> :: e<xsl:text/>
        character(len=40) :: <xsl:value-of select="$err_tol"/>_str
        <xsl:if test="$rank &gt; 0"><xsl:text/>
        integer :: <xsl:value-of select="$is"/>
    </xsl:if>
        type(unit_test_error_rank<xsl:value-of select="$rank"/>) :: info
        <xsl:call-template name="assert-array-shape"/>
        e = <xsl:value-of select="$error_f"/>(a,b)
        if( <xsl:if test="$rank &gt; 0">all( </xsl:if>e &lt;= <xsl:value-of select="$err_tol"/><xsl:if test="$rank &gt; 0"> )</xsl:if> ) then
            call assertion_succeeded()
        else<xsl:text/>
            ! Export the data as character string<xsl:text/>
            lfmt = "(<xsl:call-template name="type-format-w-optional"/>)"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str<xsl:call-template name="shape-specification-equal"/>,source=repeat(" ",lfmt_width))
            allocate(b_str<xsl:call-template name="shape-specification-equal"/>,source=repeat(" ",lfmt_width))
            allocate(e_str<xsl:call-template name="shape-specification-equal"/>,source=repeat(" ",lfmt_width))
            <xsl:choose>
				<xsl:when test="$rank = 0">
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b<xsl:text/>
            write(unit=e_str,fmt=lfmt) e<xsl:text/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:for-each select="exsl:node-set($ranks)/*[ 0 &lt; . and . &lt;= $rank]">
            do i<xsl:value-of select="."/>=1,size(a,<xsl:value-of select="."/>)<xsl:text/>
					</xsl:for-each>
                write(unit=a_str(<xsl:value-of select="$is"/>),fmt=lfmt) a(<xsl:value-of select="$is"/>)
                write(unit=b_str(<xsl:value-of select="$is"/>),fmt=lfmt) b(<xsl:value-of select="$is"/>)
                write(unit=e_str(<xsl:value-of select="$is"/>),fmt=lfmt) e(<xsl:value-of select="$is"/>)<xsl:text/>
					<xsl:for-each select="exsl:node-set($ranks)/*[ 0 &lt; . and . &lt;= $rank]">
            end do<xsl:text/>
					</xsl:for-each>
				</xsl:otherwise>
			</xsl:choose>
            
            write(unit=<xsl:value-of select="$err_tol"/>_str,fmt="(ES8.1)") <xsl:value-of select="$err_tol"/>
			<xsl:call-template name="assert-options-typeassignment">
                <xsl:with-param name="condition">e &lt;= <xsl:value-of select="$err_tol"/></xsl:with-param>
                <xsl:with-param name="condition-str">
                    <xsl:choose>
                        <xsl:when test="$error_f = 'relerr'"><xsl:text/>&amp;
                    "|(" // trim(info%a_name) // "-" // trim(info%b_name) // ")/" // trim(info%a_name) // "| &lt;= " // <xsl:value-of select="$err_tol"/>_str<xsl:text/></xsl:when>
                        <xsl:when test="$error_f = 'abserr'"><xsl:text/>&amp;
                    "|" // trim(info%a_name) // "-" // trim(info%b_name) // "| &lt;= " // <xsl:value-of select="$err_tol"/>_str<xsl:text/></xsl:when>
                        <xsl:otherwise>[[Unknown error_f: '<xsl:value-of select="$error_f"/>']]</xsl:otherwise>
                    </xsl:choose>
                </xsl:with-param>
            </xsl:call-template>
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "<xsl:value-of select="$error_f"/>"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine <xsl:call-template name="name-mangler"/>
		</xsl:for-each>
	</xsl:template>


	<xsl:template match="relerr">
		<xsl:param name="version"/>
		<xsl:for-each select="exsl:node-set($version)">
			<xsl:variable name="rank"><xsl:value-of select="@rank"/></xsl:variable>
    function <xsl:call-template name="name-mangler"/>( a,b ) result( rel_err )
        <xsl:value-of select="@type"/><xsl:call-template name="rank-specification"/>, intent(in) :: a
        <xsl:value-of select="@type"/><xsl:call-template name="rank-specification-equal"/>, intent(in) :: b
        <xsl:value-of select="@type"/><xsl:call-template name="rank-specification-equal"/> :: rel_err<xsl:text/>
        <xsl:choose>
        	<xsl:when test="@rank = 0">
        if( a/=b ) then
            rel_err = abs((a-b)/a)
        else
            rel_err = 0
        end if</xsl:when>
			<xsl:otherwise>
        where( a/=b )
            rel_err = abs((a-b)/a)
        elsewhere
            rel_err = 0
        end where</xsl:otherwise>
        </xsl:choose>
    end function <xsl:call-template name="name-mangler"/>
		</xsl:for-each>
	</xsl:template>
	
	<xsl:template name="assert-array-shape">
		<xsl:if test="@rank &gt; 0"><xsl:text/>
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), <xsl:value-of select="$ASSERT_OPTIONS"/> ) ) return
        <xsl:text/></xsl:if>
	</xsl:template>
	
	<xsl:include href="autogenerated.xsl"/>
	
</xsl:stylesheet>