! ERROR_HANDLING_UNIT_TEST
! 
!   Collection of wrapper around commonly used routines that need to check 
!   some condition.
! 
! HISTORY
! 
!   20110217 KP - Initial version
!   20110412 KP - Ported to auto-generated system
!   20111107 KP - Improve reporting
!                 NOTE@self: the distinction between runtime check and unit test test is nice.
!   20111108 KP - Changing the info_message prototype proved to be a good move for the report functions
!   20111109 KP - Code cleanup and improved documentation
!               - Changed assert_equal to assert_eq to conform to the common literal names for the comparisons
!               - Added assert_XX where XX in { NE, LT, LE, GT, GE }
!   20111110 KP - Character strings are left aligned
!               - Optional fmt argument to modify the output format
!               - info%show_difference_marks allows to show/hide the difference marks
!   20111116 (KP) - Re-generated (make autogenerated)
! 
! AUTHOR
! 
!   Koen Poppe, Department of Computer Science,
!   Katholieke Universiteit Leuven, Celestijnenlaan 200A,
!   B-3001 Heverlee, Belgium
!   Email: Koen.Poppe@cs.kuleuven.be
!
module error_handling_unit_test
    use error_handling_error
    use design_by_contract
    implicit none
    private
    save

    !--------------------------------------------------------------------------
    ! Unit testing
    !--------------------------------------------------------------------------
    
    ! Primitives
    public :: unit_test_reset
    public :: unit_test_results
    public :: write_unit_test_report
    
    ! Test statistics
    integer :: OUTPUT_WIDTH = 132 ! Maximal width of the output
    integer :: ntest = -1, nfail = -1
    character(len=32) :: module_name = ""
    
    ! Error info types
    type, extends(dbc_error), public :: unit_test_error
        character(:), allocatable :: a_name,b_name,extra_name
        logical :: show_difference_marks = .false.
    
    end type unit_test_error

    type, extends(unit_test_error) :: unit_test_error_rank0
        logical :: diff
        character(:), allocatable :: a,b, extra
    contains
        procedure :: info_message => unit_test_error_info_message_rank0
    end type unit_test_error_rank0
    type, extends(unit_test_error) :: unit_test_error_rank1
        logical, dimension(:), allocatable :: diff
        character(:), dimension(:), allocatable :: a,b, extra
    contains
        procedure :: info_message => unit_test_error_info_message_rank1
    end type unit_test_error_rank1
    type, extends(unit_test_error) :: unit_test_error_rank2
        logical, dimension(:,:), allocatable :: diff
        character(:), dimension(:,:), allocatable :: a,b, extra
    contains
        procedure :: info_message => unit_test_error_info_message_rank2
    end type unit_test_error_rank2

    !--------------------------------------------------------------------------
    ! Unit testing primitives
    !--------------------------------------------------------------------------
    
    public :: assert
    public :: assertion_fails
    interface assert
        module procedure assert_logical
    end interface assert

    public :: assert_eq
    interface assert_eq
        module procedure assert_eq_logical_rank0
        module procedure assert_eq_logical_rank1
        module procedure assert_eq_logical_rank2
        module procedure assert_eq_integer_2_rank0
        module procedure assert_eq_integer_2_rank1
        module procedure assert_eq_integer_2_rank2
        module procedure assert_eq_integer_4_rank0
        module procedure assert_eq_integer_4_rank1
        module procedure assert_eq_integer_4_rank2
        module procedure assert_eq_integer_9_rank0
        module procedure assert_eq_integer_9_rank1
        module procedure assert_eq_integer_9_rank2
        module procedure assert_eq_integer_18_rank0
        module procedure assert_eq_integer_18_rank1
        module procedure assert_eq_integer_18_rank2
        module procedure assert_eq_character_len_star_rank0
    end interface
    
    public :: assert_ne
    interface assert_ne
        module procedure assert_ne_logical_rank0
        module procedure assert_ne_logical_rank1
        module procedure assert_ne_logical_rank2
        module procedure assert_ne_integer_2_rank0
        module procedure assert_ne_integer_2_rank1
        module procedure assert_ne_integer_2_rank2
        module procedure assert_ne_integer_4_rank0
        module procedure assert_ne_integer_4_rank1
        module procedure assert_ne_integer_4_rank2
        module procedure assert_ne_integer_9_rank0
        module procedure assert_ne_integer_9_rank1
        module procedure assert_ne_integer_9_rank2
        module procedure assert_ne_integer_18_rank0
        module procedure assert_ne_integer_18_rank1
        module procedure assert_ne_integer_18_rank2
        module procedure assert_ne_character_len_star_rank0
    end interface
    
    public :: assert_lt
    interface assert_lt
        module procedure assert_lt_integer_2_rank0
        module procedure assert_lt_integer_2_rank1
        module procedure assert_lt_integer_2_rank2
        module procedure assert_lt_integer_4_rank0
        module procedure assert_lt_integer_4_rank1
        module procedure assert_lt_integer_4_rank2
        module procedure assert_lt_integer_9_rank0
        module procedure assert_lt_integer_9_rank1
        module procedure assert_lt_integer_9_rank2
        module procedure assert_lt_integer_18_rank0
        module procedure assert_lt_integer_18_rank1
        module procedure assert_lt_integer_18_rank2
        module procedure assert_lt_real_6_37_rank0
        module procedure assert_lt_real_6_37_rank1
        module procedure assert_lt_real_6_37_rank2
        module procedure assert_lt_real_15_307_rank0
        module procedure assert_lt_real_15_307_rank1
        module procedure assert_lt_real_15_307_rank2
        module procedure assert_lt_real_31_291_rank0
        module procedure assert_lt_real_31_291_rank1
        module procedure assert_lt_real_31_291_rank2
        module procedure assert_lt_character_len_star_rank0
    end interface
    
    public :: assert_le
    interface assert_le
        module procedure assert_le_integer_2_rank0
        module procedure assert_le_integer_2_rank1
        module procedure assert_le_integer_2_rank2
        module procedure assert_le_integer_4_rank0
        module procedure assert_le_integer_4_rank1
        module procedure assert_le_integer_4_rank2
        module procedure assert_le_integer_9_rank0
        module procedure assert_le_integer_9_rank1
        module procedure assert_le_integer_9_rank2
        module procedure assert_le_integer_18_rank0
        module procedure assert_le_integer_18_rank1
        module procedure assert_le_integer_18_rank2
        module procedure assert_le_real_6_37_rank0
        module procedure assert_le_real_6_37_rank1
        module procedure assert_le_real_6_37_rank2
        module procedure assert_le_real_15_307_rank0
        module procedure assert_le_real_15_307_rank1
        module procedure assert_le_real_15_307_rank2
        module procedure assert_le_real_31_291_rank0
        module procedure assert_le_real_31_291_rank1
        module procedure assert_le_real_31_291_rank2
        module procedure assert_le_character_len_star_rank0
    end interface
    
    public :: assert_gt
    interface assert_gt
        module procedure assert_gt_integer_2_rank0
        module procedure assert_gt_integer_2_rank1
        module procedure assert_gt_integer_2_rank2
        module procedure assert_gt_integer_4_rank0
        module procedure assert_gt_integer_4_rank1
        module procedure assert_gt_integer_4_rank2
        module procedure assert_gt_integer_9_rank0
        module procedure assert_gt_integer_9_rank1
        module procedure assert_gt_integer_9_rank2
        module procedure assert_gt_integer_18_rank0
        module procedure assert_gt_integer_18_rank1
        module procedure assert_gt_integer_18_rank2
        module procedure assert_gt_real_6_37_rank0
        module procedure assert_gt_real_6_37_rank1
        module procedure assert_gt_real_6_37_rank2
        module procedure assert_gt_real_15_307_rank0
        module procedure assert_gt_real_15_307_rank1
        module procedure assert_gt_real_15_307_rank2
        module procedure assert_gt_real_31_291_rank0
        module procedure assert_gt_real_31_291_rank1
        module procedure assert_gt_real_31_291_rank2
        module procedure assert_gt_character_len_star_rank0
    end interface
    
    public :: assert_ge
    interface assert_ge
        module procedure assert_ge_integer_2_rank0
        module procedure assert_ge_integer_2_rank1
        module procedure assert_ge_integer_2_rank2
        module procedure assert_ge_integer_4_rank0
        module procedure assert_ge_integer_4_rank1
        module procedure assert_ge_integer_4_rank2
        module procedure assert_ge_integer_9_rank0
        module procedure assert_ge_integer_9_rank1
        module procedure assert_ge_integer_9_rank2
        module procedure assert_ge_integer_18_rank0
        module procedure assert_ge_integer_18_rank1
        module procedure assert_ge_integer_18_rank2
        module procedure assert_ge_real_6_37_rank0
        module procedure assert_ge_real_6_37_rank1
        module procedure assert_ge_real_6_37_rank2
        module procedure assert_ge_real_15_307_rank0
        module procedure assert_ge_real_15_307_rank1
        module procedure assert_ge_real_15_307_rank2
        module procedure assert_ge_real_31_291_rank0
        module procedure assert_ge_real_31_291_rank1
        module procedure assert_ge_real_31_291_rank2
        module procedure assert_ge_character_len_star_rank0
    end interface
    
    public :: abserr
    interface abserr
        module procedure abserr_real_6_37_rank0
        module procedure abserr_real_6_37_rank1
        module procedure abserr_real_6_37_rank2
        module procedure abserr_real_15_307_rank0
        module procedure abserr_real_15_307_rank1
        module procedure abserr_real_15_307_rank2
        module procedure abserr_real_31_291_rank0
        module procedure abserr_real_31_291_rank1
        module procedure abserr_real_31_291_rank2
        module procedure abserr_complex_6_37_rank0
        module procedure abserr_complex_6_37_rank1
        module procedure abserr_complex_6_37_rank2
        module procedure abserr_complex_15_307_rank0
        module procedure abserr_complex_15_307_rank1
        module procedure abserr_complex_15_307_rank2
        module procedure abserr_complex_31_291_rank0
        module procedure abserr_complex_31_291_rank1
        module procedure abserr_complex_31_291_rank2
    end interface
    
    public :: assert_abserr
    interface assert_abserr
        module procedure assert_abserr_real_6_37_rank0
        module procedure assert_abserr_real_6_37_rank1
        module procedure assert_abserr_real_6_37_rank2
        module procedure assert_abserr_real_15_307_rank0
        module procedure assert_abserr_real_15_307_rank1
        module procedure assert_abserr_real_15_307_rank2
        module procedure assert_abserr_real_31_291_rank0
        module procedure assert_abserr_real_31_291_rank1
        module procedure assert_abserr_real_31_291_rank2
        module procedure assert_abserr_complex_6_37_rank0
        module procedure assert_abserr_complex_6_37_rank1
        module procedure assert_abserr_complex_6_37_rank2
        module procedure assert_abserr_complex_15_307_rank0
        module procedure assert_abserr_complex_15_307_rank1
        module procedure assert_abserr_complex_15_307_rank2
        module procedure assert_abserr_complex_31_291_rank0
        module procedure assert_abserr_complex_31_291_rank1
        module procedure assert_abserr_complex_31_291_rank2
    end interface
    
    public :: relerr
    interface relerr
        module procedure relerr_real_6_37_rank0
        module procedure relerr_real_6_37_rank1
        module procedure relerr_real_6_37_rank2
        module procedure relerr_real_15_307_rank0
        module procedure relerr_real_15_307_rank1
        module procedure relerr_real_15_307_rank2
        module procedure relerr_real_31_291_rank0
        module procedure relerr_real_31_291_rank1
        module procedure relerr_real_31_291_rank2
        module procedure relerr_complex_6_37_rank0
        module procedure relerr_complex_6_37_rank1
        module procedure relerr_complex_6_37_rank2
        module procedure relerr_complex_15_307_rank0
        module procedure relerr_complex_15_307_rank1
        module procedure relerr_complex_15_307_rank2
        module procedure relerr_complex_31_291_rank0
        module procedure relerr_complex_31_291_rank1
        module procedure relerr_complex_31_291_rank2
    end interface
    
    public :: assert_relerr
    interface assert_relerr
        module procedure assert_relerr_real_6_37_rank0
        module procedure assert_relerr_real_6_37_rank1
        module procedure assert_relerr_real_6_37_rank2
        module procedure assert_relerr_real_15_307_rank0
        module procedure assert_relerr_real_15_307_rank1
        module procedure assert_relerr_real_15_307_rank2
        module procedure assert_relerr_real_31_291_rank0
        module procedure assert_relerr_real_31_291_rank1
        module procedure assert_relerr_real_31_291_rank2
        module procedure assert_relerr_complex_6_37_rank0
        module procedure assert_relerr_complex_6_37_rank1
        module procedure assert_relerr_complex_6_37_rank2
        module procedure assert_relerr_complex_15_307_rank0
        module procedure assert_relerr_complex_15_307_rank1
        module procedure assert_relerr_complex_15_307_rank2
        module procedure assert_relerr_complex_31_291_rank0
        module procedure assert_relerr_complex_31_291_rank1
        module procedure assert_relerr_complex_31_291_rank2
    end interface
    
contains

    !--------------------------------------------------------------------------
    ! Unit testing
    !--------------------------------------------------------------------------
    
    ! Reset the test results
    subroutine unit_test_reset(name)
        character(len=*),intent(in), optional :: name
        ntest = 0
        nfail = 0
        module_name = optional_character( name, "" )
    end subroutine unit_test_reset
    
    ! Returns the results of the test so far.
    subroutine unit_test_results(nb_passed,nb_failed,nb_tests)
        integer, intent( out ), optional :: nb_passed, nb_failed, nb_tests
        if( present( nb_passed ) ) nb_passed = ntest-nfail
        if( present( nb_failed ) ) nb_failed = nfail
        if( present( nb_tests  ) ) nb_tests  = ntest
    end subroutine unit_test_results
    
    ! Write the test report in a fashion compatible to the test warnings.
    subroutine write_unit_test_report()
        integer :: nb_failed, nb_tests
        call unit_test_results(nb_failed=nb_failed, nb_tests=nb_tests)
        if( nb_failed == 0 ) then
            write(unit=*,fmt="(A)",advance="no") "     [OK] "
        else
            write(unit=*,fmt="(A)",advance="no") "     [??] "
        end if
        write(unit=*,fmt="(I0,A,I0,3A)") &
            nb_tests-nb_failed, " of ", nb_tests, " tests passed (", trim(module_name), ")"
    end subroutine write_unit_test_report

    !--------------------------------------------------------------------------
    ! Primitives
    !--------------------------------------------------------------------------
    
    subroutine assertion_failed()
        if( ntest >= 0 ) then
            ntest = ntest + 1
            nfail = nfail + 1
        end if
    end subroutine assertion_failed
    
    subroutine assertion_succeeded()
        if( ntest >= 0 ) then
            ntest = ntest + 1
        end if
    end subroutine assertion_succeeded
    
    subroutine assert_logical( expression, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        logical, intent(in) :: expression
        
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        call assert_eq( expression, .true., &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
    end subroutine assert_logical
    
    function assertion_fails( expression, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) result( failed )
        logical, intent(in) :: expression
        
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        logical :: failed
        
        call assert_logical( expression, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        failed = is_error( ifail )
        
    end function assertion_fails

    !--------------------------------------------------------------------------
    ! Reporting
    !--------------------------------------------------------------------------
    
    ! The first common line of each report: information about where the test failed
    subroutine report_header( info, unit, prefix, suffix, recursion )
        class(unit_test_error), intent(in) :: info
        integer, intent(in) :: unit
        character(len=*), intent(in) :: prefix, suffix
        logical, intent(in), optional :: recursion
        
        ! Report this only at the outer most level
        if( optional_logical( recursion,.false. ) ) return
            
        write(unit=unit,fmt="(A)",advance="no") prefix
        
        if( len_trim(module_name) > 0 ) then
            write(unit=unit,fmt="(3A)",advance="no") "[", trim(module_name), "] "
        end if
        
        if( ntest >= 0 ) then
            write(unit=unit,fmt="(A,I0)",advance="no") "Test ", ntest
        else
            write(unit=unit,fmt="(A)",advance="no") "Run-time check"
        end if
        
        if( allocated(info%filename) ) then
            if( len_trim(info%filename) > 0 ) then
                write(unit=unit,fmt="(2A)",advance="no") " in ", trim(info%filename)
            end if
        end if
        
        if( info%line > 0 ) then
            write(unit=unit,fmt="(A,I0)",advance="no") "@", info%line
        end if
        
        if( allocated(info%statement) ) then
            if( len_trim(info%statement) > 0 ) then
                write(unit=unit,fmt="(2A)",advance="no") ": ", trim(info%statement)
            end if
        end if
        
        if( allocated(info%comment) ) then
            write(unit=unit,fmt="(3A)",advance="no") " (", trim(info%comment), ")"
        end if
            
        write(unit=unit,fmt="(A)") suffix
        
    end subroutine report_header
    
    ! For arrays: report how many elements differ
    subroutine report_header_nb_differences( unit,prefix,suffix,  nb_diff,nb, recursion )
        integer, intent(in) :: unit
        character(len=*), intent(in) :: prefix, suffix
        integer, intent(in) :: nb_diff, nb
        logical, intent(in), optional :: recursion
        
        ! Report this only at the outer most level
        if( optional_logical( recursion,.false. ) ) return
        
        if( nb_diff == nb .and. nb == 1 ) then
            ! Do not report, just two different scalars
        else if( nb_diff == nb ) then
            write(unit=unit,fmt="(2A,I0,2A)") prefix, &
                "All the ", nb, " elements differ: ", suffix
        else
            write(unit=unit,fmt="(A,I0,A,I0,2A)") prefix, &
                nb_diff, " of the ", nb, " elements differs: ", suffix
        end if
        
    end subroutine report_header_nb_differences
    
    ! Common routine for the format string of the report's output
    subroutine prepare_format_string( fmt_str, nb, name_width, element_width, sep )
        character(len=*), intent(out) :: fmt_str
        integer, intent(in) :: nb, name_width, element_width
        character(len=*), intent(in) :: sep
        
        if( nb == 1 ) then
            write(unit=fmt_str,fmt="(2(A,I0),A)") &
                "(A,A",name_width,",A,A",element_width,",2A)"
        else
            write(unit=fmt_str,fmt="(2(A,I0),A,I0,3A,I0,A)") &
                "(A,A",name_width,",A,A",element_width,",",nb-1,"('", sep, "',A",element_width,"),2A)"
        end if
        
    end subroutine prepare_format_string
    
    ! Report details about the differences between rank-1 arrays. 
    ! The optional arguments can be used to overwrite those stored in the <info> argument.
    subroutine report_details_rank1( info, unit, prefix, suffix, diff, a, b, extra, &
                    a_name, b_name,extra_name, idx_row, recursion )
        class(unit_test_error), intent(in) :: info
        integer, intent(in) :: unit
        character(len=*), intent(in) :: prefix, suffix
        
        logical, dimension(:), intent(in) :: diff
        character(len=*), dimension(:), intent(in) :: a, b
        character(len=*), dimension(:), intent(in), optional :: extra
        
        character(len=*), intent(in), optional :: a_name, b_name, extra_name
        character(len=*), dimension(:), intent(in), optional :: idx_row
        logical, intent(in), optional :: recursion
        
        ! Local variables
        character(len=3), parameter :: eqs = " = ", sep = " | ", blk = "   "
        integer, dimension(:), allocatable :: diff_idx
        integer :: i,j, element_width, nb, nb_diff, max_elements_per_row, row, idx, name_width
        character(len=40) :: fmt_str, la_name, lb_name, trailing, lextra_name
        character(len=len(blk)) :: sep_or_blk
        character(len=len(a(1))), dimension(size(a)) :: diff_str, the_row
        
        ! Get the actual names and their maximum width
        la_name     = optional_allocatable_character( a_name,     info%a_name,    "a" )
        lb_name     = optional_allocatable_character( b_name,     info%b_name,    "b" )
        lextra_name = optional_allocatable_character( extra_name, info%extra_name, "" )
        name_width = max(1,len_trim(la_name),len_trim(lb_name),len_trim(lextra_name))
        
        ! Some statistics
        element_width = len(a(1))
        nb = size(diff)
        nb_diff = count(diff)
        
        ! Common header
        call report_header( info, unit, prefix, suffix, recursion )
        call report_header_nb_differences( unit,prefix,suffix, nb_diff,nb, recursion )
        
        ! Get the indexes of the differences the PACK instruction masks 1,...,nb
        ! with the diff logical array and thus returns exactly those indexes.
        allocate(diff_idx(nb_diff))
        diff_idx = pack( (/ (i,i=1,nb) /), diff )
        
        ! Prepare the difference strings: put "-" where they are equal, "^" when they differ
        diff_str = " "
        do i=1,nb_diff
            idx = diff_idx(i)
            do j=1,len(a(idx))
                if( a(idx)(j:j) /= b(idx)(j:j) ) then
                    diff_str(idx)(j:j) = "^"
                else
                    diff_str(idx)(j:j) = "-"
                end if
            end do
        end do
        
        ! How many elements can we show on one row?
        max_elements_per_row = (OUTPUT_WIDTH-name_width-len(prefix)-len(suffix)-len(eqs))/ &
            (element_width+len(sep)) ! Integer division -< floored
        
        ! Case 1: report all the differences, without compressing the results
        if( optional_logical( recursion,.false.) .or. (nb <= max_elements_per_row .and. .not. present(idx_row)) ) then
            ! Possibly, not all elements fit and the output is truncated
            if( nb > max_elements_per_row ) then
                nb = max_elements_per_row
                write(unit=trailing,fmt="(2A)") sep, "..."
            else
                trailing = ""
            end if
            
            ! Prepare format string and output the values of a and b
            call prepare_format_string( fmt_str, nb, name_width, element_width, sep )
            write(unit=unit,fmt=fmt_str) prefix, trim(la_name), eqs, a(1:nb), trim(trailing), suffix
            write(unit=unit,fmt=fmt_str) prefix, trim(lb_name), eqs, b(1:nb), trim(trailing), suffix
            
            ! Idemdito for the differences, but now without sep
            if( info%show_difference_marks ) then
                call prepare_format_string( fmt_str, nb, name_width, element_width, blk )
                write(unit=unit,fmt=fmt_str) prefix, "", blk, diff_str(1:nb), trim(trailing), suffix
            end if
            
            ! If needed, also do this for extra
            if( present(extra) ) then
                call prepare_format_string( fmt_str, nb, name_width, element_width, sep )
                write(unit=unit,fmt=fmt_str) prefix, trim(lextra_name), eqs, extra(1:nb), trim(trailing), suffix
            end if
            return
        end if
        
        ! Case 2: report the differences selectively, by only showing the columns that differ
        do row=0,4
            if( .not. present(extra) .and. row == 4 ) then
                exit ! No extra -> stop the loop here
            end if
            if( row /= 3 .or. info%show_difference_marks ) then
                write(unit=unit,fmt="(A)",advance="no") prefix
                
                ! Write the name and assign the contents of the current row to <the_row>
                write(unit=fmt_str,fmt="(2(A,I0),A)") "(A",name_width,",A",len(eqs),")"
                select case( row )
                    case( 0 ) ! Indexes
                        if( name_width < 5 ) then
                            write(unit=unit,fmt=fmt_str,advance="no") "idx", eqs
                        else
                            write(unit=unit,fmt=fmt_str,advance="no") "index", eqs                        
                        end if
                    
                        if( present( idx_row ) ) then
                            the_row = idx_row
                        else
                            the_row = " "
                            write(unit=fmt_str,fmt="(A,I0,A)") "(I", element_width, ")"
                            do i=1,nb_diff
                                write(unit=the_row(diff_idx(i)),fmt=fmt_str) diff_idx(i)
                            end do
                        end if
                    case( 1 ) ! a
                        write(unit=unit,fmt=fmt_str,advance="no") trim(la_name), eqs
                        the_row = a
                    case( 2 ) ! b
                        write(unit=unit,fmt=fmt_str,advance="no") trim(lb_name), eqs
                        the_row = b
                    case( 3 ) ! differences
                        write(unit=unit,fmt=fmt_str,advance="no") "",""
                        the_row = diff_str
                    case( 4 ) ! extra
                        write(unit=unit,fmt=fmt_str,advance="no") lextra_name, eqs
                        the_row = extra
                end select
            
                ! The seperator in between the columns
                if( row == 3 ) then
                    sep_or_blk = blk
                else
                    sep_or_blk = sep
                end if
            
                ! Report the rows
                idx = 0
                do i=1,min(nb_diff,max_elements_per_row)
                    if( i>1 ) then
                        write(unit=unit,fmt="(A)",advance="no") sep_or_blk
                    end if
                
                    ! Were there elements in between?
                    if( diff_idx(i) > idx+1 ) then
                        write(unit=unit,fmt="(2A)",advance="no") ".", sep_or_blk
                    end if
            
                    ! Element
                    idx = diff_idx(i)
                    write(unit=unit,fmt="(A)",advance="no") the_row(idx)
                end do
                if( nb_diff > max_elements_per_row ) then
                    write(unit=unit,fmt="(2A)",advance="no") sep_or_blk, "..."
                else if( diff_idx(min(nb_diff,max_elements_per_row)) < len(eqs) ) then
                    write(unit=unit,fmt="(2A)",advance="no") sep_or_blk, "."
                end if
            
                write(unit=unit,fmt="(A)",advance="yes") suffix
            end if
        end do
        
    end subroutine report_details_rank1
    
    ! Analogue of report_details_rank1, but for rank-2 arrays
    subroutine report_details_rank2( info, unit, prefix, suffix, diff, a,b,extra, &
                    a_name,b_name,extra_name, recursion )
        class(unit_test_error), intent(in) :: info
        integer, intent(in) :: unit
        character(len=*), intent(in) :: prefix, suffix
        logical, dimension(:,:), intent(in) :: diff
        character(len=*), dimension(:,:), intent(in) :: a,b
        
        character(len=*), dimension(:,:), intent(in), optional :: extra
        character(len=*), intent(in), optional :: a_name, b_name, extra_name
        logical, intent(in), optional :: recursion
        
        ! Local variables
        character(len=40) :: a_rowstr, b_rowstr, fmt_str
        integer :: row, prev_row
        
        ! Common header
        call report_header( info, unit, prefix, suffix, recursion )
        call report_header_nb_differences( unit,prefix,suffix, count(diff),size(diff), recursion ) 
        
        ! Boolean overview of the array and its differences
        do row=1,size(a,1)
            write(unit=unit,fmt="(A,100L2)",advance="no") prefix, .not. diff(row,:) ! Assuming less than 100 elements ...
            write(unit=unit,fmt="(A)") suffix
        end do
        
        ! Prepare the format string for the indexing of the rows of a and b
        write(unit=fmt_str,fmt="(A,I0,A)") "(2A,I",ceiling(log10(real(size(a,1)))),",A)"
        
        ! Iterate over all rows, keeping track of the previous row to indicate supressed rows
        prev_row = 0
        do row=1,size(a,1)
            ! Only report rows with differences
            if( any(diff(row,:)) ) then
                ! Indicate that equal rows were supressed
                if( row /= prev_row+1 ) then
                    write(unit=unit,fmt="(3A)") prefix, "(equal rows suppressed)", suffix
                end if
                
                ! Name overwrites for the indexed rows
                write(unit=a_rowstr,fmt=fmt_str) trim(optional_allocatable_character(a_name, info%a_name, "a" )), "(", row, ",:)"
                write(unit=b_rowstr,fmt=fmt_str) trim(optional_allocatable_character(b_name, info%b_name, "b" )), "(", row, ",:)"
                
                if( present(extra) ) then
                    call report_details_rank1( info,unit,prefix,suffix, diff(row,:),a(row,:),b(row,:),extra(row,:), &
                                a_name=a_rowstr,b_name=b_rowstr, recursion=.true., &
                                extra_name=optional_allocatable_character( extra_name, info%extra_name, "extra" ) )
                    ! Extra separating line to avoid confusion in case there was extra information
                    if( row < size(a,1) ) then
                        write(unit=unit,fmt="(3A)") prefix, repeat("-",len_trim(a_rowstr)), suffix
                    end if
                else
                    call report_details_rank1( info,unit,prefix,suffix, diff(row,:),a(row,:),b(row,:), &
                                a_name=a_rowstr,b_name=b_rowstr, recursion=.true. )
                end if
                prev_row = row
            end if
        end do
        if( size(a,1) /= prev_row ) then
            write(unit=unit,fmt="(3A)") prefix, "(equal rows suppressed)", suffix
        end if
        
    end subroutine report_details_rank2

    !--------------------------------------------------------------------------
    ! Type bound procedures
    !--------------------------------------------------------------------------
    ! TODO: better way of handling the optionally allocated info%extra?
    
    subroutine unit_test_error_info_message_rank0( info, unit, prefix, suffix )
        class(unit_test_error_rank0), intent(in) :: info
        integer, intent(in) :: unit
        character(len=*), intent(in) :: prefix, suffix
        
        if( allocated(info%extra) ) then
            call report_details_rank1( info, unit, prefix, suffix, &
                    (/ info%diff /), (/ info%a /), (/ info%b /), (/ info%extra /) )
        else
            call report_details_rank1( info, unit, prefix, suffix, &
                    (/ info%diff /), (/ info%a /), (/ info%b /) )
        end if
        
    end subroutine unit_test_error_info_message_rank0
    
    subroutine unit_test_error_info_message_rank1( info, unit, prefix, suffix )
        class(unit_test_error_rank1), intent(in) :: info
        integer, intent(in) :: unit
        character(len=*), intent(in) :: prefix, suffix
        
        if( allocated(info%extra) ) then
            call report_details_rank1( info, unit, prefix, suffix, &
                    info%diff, info%a, info%b, info%extra )
        else
            call report_details_rank1( info, unit, prefix, suffix, &
                    info%diff, info%a, info%b )
        end if
        
    end subroutine unit_test_error_info_message_rank1
    
    subroutine unit_test_error_info_message_rank2( info, unit, prefix, suffix )
        class(unit_test_error_rank2), intent(in) :: info
        integer, intent(in) :: unit
        character(len=*), intent(in) :: prefix, suffix
        
        if( allocated(info%extra) ) then
            call report_details_rank2( info, unit, prefix, suffix, &
                    info%diff, info%a, info%b, info%extra )
        else
            call report_details_rank2( info, unit, prefix, suffix, &
                    info%diff, info%a, info%b )
        end if
        
    end subroutine unit_test_error_info_message_rank2

    !--------------------------------------------------------------------------
    ! Procedure assert_eq
    !--------------------------------------------------------------------------
    
    recursive subroutine assert_eq_logical_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        logical, intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a .eqv. b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"L1")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a .eqv. b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " .eqv. " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_eq_logical_rank0
    recursive subroutine assert_eq_logical_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        logical, dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a .eqv. b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"L1")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a .eqv. b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " .eqv. " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_eq_logical_rank1
    recursive subroutine assert_eq_logical_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        logical, dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a .eqv. b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"L1")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a .eqv. b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " .eqv. " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_eq_logical_rank2
    recursive subroutine assert_eq_integer_2_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(2)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a == b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I3")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a == b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " == " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_eq_integer_2_rank0
    recursive subroutine assert_eq_integer_2_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(2)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a == b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I3")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a == b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " == " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_eq_integer_2_rank1
    recursive subroutine assert_eq_integer_2_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(2)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a == b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I3")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a == b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " == " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_eq_integer_2_rank2
    recursive subroutine assert_eq_integer_4_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(4)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a == b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I5")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a == b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " == " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_eq_integer_4_rank0
    recursive subroutine assert_eq_integer_4_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(4)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a == b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I5")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a == b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " == " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_eq_integer_4_rank1
    recursive subroutine assert_eq_integer_4_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(4)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a == b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I5")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a == b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " == " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_eq_integer_4_rank2
    recursive subroutine assert_eq_integer_9_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(9)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a == b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I10")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a == b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " == " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_eq_integer_9_rank0
    recursive subroutine assert_eq_integer_9_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(9)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a == b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I10")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a == b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " == " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_eq_integer_9_rank1
    recursive subroutine assert_eq_integer_9_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(9)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a == b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I10")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a == b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " == " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_eq_integer_9_rank2
    recursive subroutine assert_eq_integer_18_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(18)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a == b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I19")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a == b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " == " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_eq_integer_18_rank0
    recursive subroutine assert_eq_integer_18_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(18)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a == b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I19")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a == b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " == " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_eq_integer_18_rank1
    recursive subroutine assert_eq_integer_18_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(18)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a == b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I19")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a == b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " == " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_eq_integer_18_rank2
    recursive subroutine assert_eq_character_len_star_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        character(len=*), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a == b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"A20")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            ! Left-align character strings
            a_str = adjustl( a_str )
            b_str = adjustl( b_str )
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a == b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " == " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_eq_character_len_star_rank0

    !--------------------------------------------------------------------------
    ! Procedure assert_ne
    !--------------------------------------------------------------------------
    
    recursive subroutine assert_ne_logical_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        logical, intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a .neqv. b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"L1")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a .neqv. b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " .neqv. " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ne_logical_rank0
    recursive subroutine assert_ne_logical_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        logical, dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a .neqv. b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"L1")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a .neqv. b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " .neqv. " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ne_logical_rank1
    recursive subroutine assert_ne_logical_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        logical, dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a .neqv. b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"L1")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a .neqv. b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " .neqv. " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ne_logical_rank2
    recursive subroutine assert_ne_integer_2_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(2)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a /= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I3")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a /= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " /= " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ne_integer_2_rank0
    recursive subroutine assert_ne_integer_2_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(2)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a /= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I3")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a /= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " /= " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ne_integer_2_rank1
    recursive subroutine assert_ne_integer_2_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(2)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a /= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I3")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a /= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " /= " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ne_integer_2_rank2
    recursive subroutine assert_ne_integer_4_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(4)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a /= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I5")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a /= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " /= " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ne_integer_4_rank0
    recursive subroutine assert_ne_integer_4_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(4)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a /= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I5")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a /= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " /= " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ne_integer_4_rank1
    recursive subroutine assert_ne_integer_4_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(4)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a /= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I5")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a /= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " /= " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ne_integer_4_rank2
    recursive subroutine assert_ne_integer_9_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(9)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a /= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I10")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a /= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " /= " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ne_integer_9_rank0
    recursive subroutine assert_ne_integer_9_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(9)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a /= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I10")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a /= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " /= " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ne_integer_9_rank1
    recursive subroutine assert_ne_integer_9_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(9)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a /= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I10")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a /= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " /= " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ne_integer_9_rank2
    recursive subroutine assert_ne_integer_18_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(18)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a /= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I19")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a /= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " /= " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ne_integer_18_rank0
    recursive subroutine assert_ne_integer_18_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(18)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a /= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I19")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a /= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " /= " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ne_integer_18_rank1
    recursive subroutine assert_ne_integer_18_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(18)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a /= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I19")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a /= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " /= " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ne_integer_18_rank2
    recursive subroutine assert_ne_character_len_star_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        character(len=*), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a /= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"A20")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            ! Left-align character strings
            a_str = adjustl( a_str )
            b_str = adjustl( b_str )
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a /= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " /= " // info%b_name )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ne_character_len_star_rank0

    !--------------------------------------------------------------------------
    ! Procedure assert_lt
    !--------------------------------------------------------------------------
    
    recursive subroutine assert_lt_integer_2_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(2)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a < b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I3")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_integer_2_rank0
    recursive subroutine assert_lt_integer_2_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(2)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a < b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I3")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_integer_2_rank1
    recursive subroutine assert_lt_integer_2_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(2)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a < b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I3")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_integer_2_rank2
    recursive subroutine assert_lt_integer_4_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(4)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a < b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I5")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_integer_4_rank0
    recursive subroutine assert_lt_integer_4_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(4)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a < b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I5")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_integer_4_rank1
    recursive subroutine assert_lt_integer_4_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(4)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a < b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I5")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_integer_4_rank2
    recursive subroutine assert_lt_integer_9_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(9)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a < b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I10")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_integer_9_rank0
    recursive subroutine assert_lt_integer_9_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(9)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a < b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I10")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_integer_9_rank1
    recursive subroutine assert_lt_integer_9_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(9)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a < b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I10")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_integer_9_rank2
    recursive subroutine assert_lt_integer_18_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(18)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a < b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I19")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_integer_18_rank0
    recursive subroutine assert_lt_integer_18_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(18)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a < b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I19")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_integer_18_rank1
    recursive subroutine assert_lt_integer_18_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(18)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a < b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I19")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_integer_18_rank2
    recursive subroutine assert_lt_real_6_37_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(6,37)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a < b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_real_6_37_rank0
    recursive subroutine assert_lt_real_6_37_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(6,37)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a < b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_real_6_37_rank1
    recursive subroutine assert_lt_real_6_37_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(6,37)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a < b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_real_6_37_rank2
    recursive subroutine assert_lt_real_15_307_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(15,307)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a < b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_real_15_307_rank0
    recursive subroutine assert_lt_real_15_307_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(15,307)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a < b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_real_15_307_rank1
    recursive subroutine assert_lt_real_15_307_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(15,307)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a < b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_real_15_307_rank2
    recursive subroutine assert_lt_real_31_291_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(31,291)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a < b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_real_31_291_rank0
    recursive subroutine assert_lt_real_31_291_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(31,291)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a < b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_real_31_291_rank1
    recursive subroutine assert_lt_real_31_291_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(31,291)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a < b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_real_31_291_rank2
    recursive subroutine assert_lt_character_len_star_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        character(len=*), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a < b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"A20")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            ! Left-align character strings
            a_str = adjustl( a_str )
            b_str = adjustl( b_str )
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a < b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " < " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_lt_character_len_star_rank0

    !--------------------------------------------------------------------------
    ! Procedure assert_le
    !--------------------------------------------------------------------------
    
    recursive subroutine assert_le_integer_2_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(2)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a <= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I3")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_integer_2_rank0
    recursive subroutine assert_le_integer_2_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(2)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a <= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I3")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_integer_2_rank1
    recursive subroutine assert_le_integer_2_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(2)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a <= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I3")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_integer_2_rank2
    recursive subroutine assert_le_integer_4_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(4)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a <= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I5")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_integer_4_rank0
    recursive subroutine assert_le_integer_4_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(4)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a <= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I5")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_integer_4_rank1
    recursive subroutine assert_le_integer_4_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(4)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a <= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I5")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_integer_4_rank2
    recursive subroutine assert_le_integer_9_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(9)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a <= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I10")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_integer_9_rank0
    recursive subroutine assert_le_integer_9_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(9)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a <= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I10")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_integer_9_rank1
    recursive subroutine assert_le_integer_9_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(9)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a <= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I10")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_integer_9_rank2
    recursive subroutine assert_le_integer_18_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(18)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a <= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I19")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_integer_18_rank0
    recursive subroutine assert_le_integer_18_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(18)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a <= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I19")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_integer_18_rank1
    recursive subroutine assert_le_integer_18_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(18)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a <= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I19")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_integer_18_rank2
    recursive subroutine assert_le_real_6_37_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(6,37)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a <= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_real_6_37_rank0
    recursive subroutine assert_le_real_6_37_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(6,37)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a <= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_real_6_37_rank1
    recursive subroutine assert_le_real_6_37_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(6,37)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a <= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_real_6_37_rank2
    recursive subroutine assert_le_real_15_307_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(15,307)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a <= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_real_15_307_rank0
    recursive subroutine assert_le_real_15_307_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(15,307)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a <= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_real_15_307_rank1
    recursive subroutine assert_le_real_15_307_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(15,307)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a <= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_real_15_307_rank2
    recursive subroutine assert_le_real_31_291_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(31,291)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a <= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_real_31_291_rank0
    recursive subroutine assert_le_real_31_291_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(31,291)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a <= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_real_31_291_rank1
    recursive subroutine assert_le_real_31_291_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(31,291)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a <= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_real_31_291_rank2
    recursive subroutine assert_le_character_len_star_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        character(len=*), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a <= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"A20")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            ! Left-align character strings
            a_str = adjustl( a_str )
            b_str = adjustl( b_str )
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a <= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " <= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_le_character_len_star_rank0

    !--------------------------------------------------------------------------
    ! Procedure assert_gt
    !--------------------------------------------------------------------------
    
    recursive subroutine assert_gt_integer_2_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(2)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a > b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I3")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_integer_2_rank0
    recursive subroutine assert_gt_integer_2_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(2)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a > b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I3")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_integer_2_rank1
    recursive subroutine assert_gt_integer_2_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(2)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a > b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I3")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_integer_2_rank2
    recursive subroutine assert_gt_integer_4_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(4)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a > b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I5")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_integer_4_rank0
    recursive subroutine assert_gt_integer_4_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(4)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a > b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I5")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_integer_4_rank1
    recursive subroutine assert_gt_integer_4_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(4)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a > b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I5")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_integer_4_rank2
    recursive subroutine assert_gt_integer_9_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(9)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a > b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I10")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_integer_9_rank0
    recursive subroutine assert_gt_integer_9_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(9)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a > b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I10")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_integer_9_rank1
    recursive subroutine assert_gt_integer_9_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(9)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a > b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I10")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_integer_9_rank2
    recursive subroutine assert_gt_integer_18_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(18)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a > b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I19")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_integer_18_rank0
    recursive subroutine assert_gt_integer_18_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(18)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a > b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I19")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_integer_18_rank1
    recursive subroutine assert_gt_integer_18_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(18)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a > b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I19")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_integer_18_rank2
    recursive subroutine assert_gt_real_6_37_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(6,37)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a > b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_real_6_37_rank0
    recursive subroutine assert_gt_real_6_37_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(6,37)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a > b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_real_6_37_rank1
    recursive subroutine assert_gt_real_6_37_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(6,37)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a > b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_real_6_37_rank2
    recursive subroutine assert_gt_real_15_307_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(15,307)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a > b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_real_15_307_rank0
    recursive subroutine assert_gt_real_15_307_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(15,307)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a > b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_real_15_307_rank1
    recursive subroutine assert_gt_real_15_307_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(15,307)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a > b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_real_15_307_rank2
    recursive subroutine assert_gt_real_31_291_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(31,291)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a > b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_real_31_291_rank0
    recursive subroutine assert_gt_real_31_291_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(31,291)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a > b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_real_31_291_rank1
    recursive subroutine assert_gt_real_31_291_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(31,291)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a > b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_real_31_291_rank2
    recursive subroutine assert_gt_character_len_star_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        character(len=*), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a > b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"A20")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            ! Left-align character strings
            a_str = adjustl( a_str )
            b_str = adjustl( b_str )
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a > b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " > " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_gt_character_len_star_rank0

    !--------------------------------------------------------------------------
    ! Procedure assert_ge
    !--------------------------------------------------------------------------
    
    recursive subroutine assert_ge_integer_2_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(2)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a >= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I3")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_integer_2_rank0
    recursive subroutine assert_ge_integer_2_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(2)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a >= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I3")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_integer_2_rank1
    recursive subroutine assert_ge_integer_2_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(2)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a >= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I3")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_integer_2_rank2
    recursive subroutine assert_ge_integer_4_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(4)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a >= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I5")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_integer_4_rank0
    recursive subroutine assert_ge_integer_4_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(4)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a >= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I5")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_integer_4_rank1
    recursive subroutine assert_ge_integer_4_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(4)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a >= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I5")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_integer_4_rank2
    recursive subroutine assert_ge_integer_9_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(9)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a >= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I10")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_integer_9_rank0
    recursive subroutine assert_ge_integer_9_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(9)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a >= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I10")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_integer_9_rank1
    recursive subroutine assert_ge_integer_9_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(9)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a >= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I10")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_integer_9_rank2
    recursive subroutine assert_ge_integer_18_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(18)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a >= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I19")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_integer_18_rank0
    recursive subroutine assert_ge_integer_18_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(18)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a >= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I19")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_integer_18_rank1
    recursive subroutine assert_ge_integer_18_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        integer(kind=selected_int_kind(18)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a >= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"I19")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_integer_18_rank2
    recursive subroutine assert_ge_real_6_37_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(6,37)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a >= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_real_6_37_rank0
    recursive subroutine assert_ge_real_6_37_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(6,37)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a >= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_real_6_37_rank1
    recursive subroutine assert_ge_real_6_37_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(6,37)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a >= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_real_6_37_rank2
    recursive subroutine assert_ge_real_15_307_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(15,307)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a >= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_real_15_307_rank0
    recursive subroutine assert_ge_real_15_307_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(15,307)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a >= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_real_15_307_rank1
    recursive subroutine assert_ge_real_15_307_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(15,307)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a >= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_real_15_307_rank2
    recursive subroutine assert_ge_real_31_291_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(31,291)), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a >= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_real_31_291_rank0
    recursive subroutine assert_ge_real_31_291_rank1( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(31,291)), dimension(:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a >= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_real_31_291_rank1
    recursive subroutine assert_ge_real_31_291_rank2( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(31,291)), dimension(:,:), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        if( all( a >= b ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
            end do
            end do
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_real_31_291_rank2
    recursive subroutine assert_ge_character_len_star_rank0( a, b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        character(len=*), intent(in) :: a,b
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        
        type(unit_test_error_rank0) :: info
        
        if( a >= b ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"A20")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            ! Left-align character strings
            a_str = adjustl( a_str )
            b_str = adjustl( b_str )
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( a >= b )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, info%a_name // " >= " // info%b_name )
            
            ! TODO: check class invariants info
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed( )
        end if
    end subroutine assert_ge_character_len_star_rank0

    !--------------------------------------------------------------------------
    ! Procedure abserr
    ! 
    ! These functions never cause floating point errors (i.e., inf-inf)
    !--------------------------------------------------------------------------
    
    function abserr_real_6_37_rank0( a,b ) result( abs_err )
        real(kind=selected_real_kind(6,37)), intent(in) :: a
        real(kind=selected_real_kind(6,37)), intent(in) :: b
        real(kind=selected_real_kind(6,37)) :: abs_err
        if( a/=b ) then
            abs_err = abs(a-b)
        else
            abs_err = 0
        end if
    end function abserr_real_6_37_rank0
    function abserr_real_6_37_rank1( a,b ) result( abs_err )
        real(kind=selected_real_kind(6,37)), dimension(:), intent(in) :: a
        real(kind=selected_real_kind(6,37)), dimension(size(a,1)), intent(in) :: b
        real(kind=selected_real_kind(6,37)), dimension(size(a,1)) :: abs_err
        where( a/=b )
            abs_err = abs(a-b)
        elsewhere
            abs_err = 0
        end where
    end function abserr_real_6_37_rank1
    function abserr_real_6_37_rank2( a,b ) result( abs_err )
        real(kind=selected_real_kind(6,37)), dimension(:,:), intent(in) :: a
        real(kind=selected_real_kind(6,37)), dimension(size(a,1),size(a,2)), intent(in) :: b
        real(kind=selected_real_kind(6,37)), dimension(size(a,1),size(a,2)) :: abs_err
        where( a/=b )
            abs_err = abs(a-b)
        elsewhere
            abs_err = 0
        end where
    end function abserr_real_6_37_rank2
    function abserr_real_15_307_rank0( a,b ) result( abs_err )
        real(kind=selected_real_kind(15,307)), intent(in) :: a
        real(kind=selected_real_kind(15,307)), intent(in) :: b
        real(kind=selected_real_kind(15,307)) :: abs_err
        if( a/=b ) then
            abs_err = abs(a-b)
        else
            abs_err = 0
        end if
    end function abserr_real_15_307_rank0
    function abserr_real_15_307_rank1( a,b ) result( abs_err )
        real(kind=selected_real_kind(15,307)), dimension(:), intent(in) :: a
        real(kind=selected_real_kind(15,307)), dimension(size(a,1)), intent(in) :: b
        real(kind=selected_real_kind(15,307)), dimension(size(a,1)) :: abs_err
        where( a/=b )
            abs_err = abs(a-b)
        elsewhere
            abs_err = 0
        end where
    end function abserr_real_15_307_rank1
    function abserr_real_15_307_rank2( a,b ) result( abs_err )
        real(kind=selected_real_kind(15,307)), dimension(:,:), intent(in) :: a
        real(kind=selected_real_kind(15,307)), dimension(size(a,1),size(a,2)), intent(in) :: b
        real(kind=selected_real_kind(15,307)), dimension(size(a,1),size(a,2)) :: abs_err
        where( a/=b )
            abs_err = abs(a-b)
        elsewhere
            abs_err = 0
        end where
    end function abserr_real_15_307_rank2
    function abserr_real_31_291_rank0( a,b ) result( abs_err )
        real(kind=selected_real_kind(31,291)), intent(in) :: a
        real(kind=selected_real_kind(31,291)), intent(in) :: b
        real(kind=selected_real_kind(31,291)) :: abs_err
        if( a/=b ) then
            abs_err = abs(a-b)
        else
            abs_err = 0
        end if
    end function abserr_real_31_291_rank0
    function abserr_real_31_291_rank1( a,b ) result( abs_err )
        real(kind=selected_real_kind(31,291)), dimension(:), intent(in) :: a
        real(kind=selected_real_kind(31,291)), dimension(size(a,1)), intent(in) :: b
        real(kind=selected_real_kind(31,291)), dimension(size(a,1)) :: abs_err
        where( a/=b )
            abs_err = abs(a-b)
        elsewhere
            abs_err = 0
        end where
    end function abserr_real_31_291_rank1
    function abserr_real_31_291_rank2( a,b ) result( abs_err )
        real(kind=selected_real_kind(31,291)), dimension(:,:), intent(in) :: a
        real(kind=selected_real_kind(31,291)), dimension(size(a,1),size(a,2)), intent(in) :: b
        real(kind=selected_real_kind(31,291)), dimension(size(a,1),size(a,2)) :: abs_err
        where( a/=b )
            abs_err = abs(a-b)
        elsewhere
            abs_err = 0
        end where
    end function abserr_real_31_291_rank2
    function abserr_complex_6_37_rank0( a,b ) result( abs_err )
        complex(kind=selected_real_kind(6,37)), intent(in) :: a
        complex(kind=selected_real_kind(6,37)), intent(in) :: b
        real(kind=selected_real_kind(6,37)) :: abs_err
        if( a/=b ) then
            abs_err = abs(a-b)
        else
            abs_err = 0
        end if
    end function abserr_complex_6_37_rank0
    function abserr_complex_6_37_rank1( a,b ) result( abs_err )
        complex(kind=selected_real_kind(6,37)), dimension(:), intent(in) :: a
        complex(kind=selected_real_kind(6,37)), dimension(size(a,1)), intent(in) :: b
        real(kind=selected_real_kind(6,37)), dimension(size(a,1)) :: abs_err
        where( a/=b )
            abs_err = abs(a-b)
        elsewhere
            abs_err = 0
        end where
    end function abserr_complex_6_37_rank1
    function abserr_complex_6_37_rank2( a,b ) result( abs_err )
        complex(kind=selected_real_kind(6,37)), dimension(:,:), intent(in) :: a
        complex(kind=selected_real_kind(6,37)), dimension(size(a,1),size(a,2)), intent(in) :: b
        real(kind=selected_real_kind(6,37)), dimension(size(a,1),size(a,2)) :: abs_err
        where( a/=b )
            abs_err = abs(a-b)
        elsewhere
            abs_err = 0
        end where
    end function abserr_complex_6_37_rank2
    function abserr_complex_15_307_rank0( a,b ) result( abs_err )
        complex(kind=selected_real_kind(15,307)), intent(in) :: a
        complex(kind=selected_real_kind(15,307)), intent(in) :: b
        real(kind=selected_real_kind(15,307)) :: abs_err
        if( a/=b ) then
            abs_err = abs(a-b)
        else
            abs_err = 0
        end if
    end function abserr_complex_15_307_rank0
    function abserr_complex_15_307_rank1( a,b ) result( abs_err )
        complex(kind=selected_real_kind(15,307)), dimension(:), intent(in) :: a
        complex(kind=selected_real_kind(15,307)), dimension(size(a,1)), intent(in) :: b
        real(kind=selected_real_kind(15,307)), dimension(size(a,1)) :: abs_err
        where( a/=b )
            abs_err = abs(a-b)
        elsewhere
            abs_err = 0
        end where
    end function abserr_complex_15_307_rank1
    function abserr_complex_15_307_rank2( a,b ) result( abs_err )
        complex(kind=selected_real_kind(15,307)), dimension(:,:), intent(in) :: a
        complex(kind=selected_real_kind(15,307)), dimension(size(a,1),size(a,2)), intent(in) :: b
        real(kind=selected_real_kind(15,307)), dimension(size(a,1),size(a,2)) :: abs_err
        where( a/=b )
            abs_err = abs(a-b)
        elsewhere
            abs_err = 0
        end where
    end function abserr_complex_15_307_rank2
    function abserr_complex_31_291_rank0( a,b ) result( abs_err )
        complex(kind=selected_real_kind(31,291)), intent(in) :: a
        complex(kind=selected_real_kind(31,291)), intent(in) :: b
        real(kind=selected_real_kind(31,291)) :: abs_err
        if( a/=b ) then
            abs_err = abs(a-b)
        else
            abs_err = 0
        end if
    end function abserr_complex_31_291_rank0
    function abserr_complex_31_291_rank1( a,b ) result( abs_err )
        complex(kind=selected_real_kind(31,291)), dimension(:), intent(in) :: a
        complex(kind=selected_real_kind(31,291)), dimension(size(a,1)), intent(in) :: b
        real(kind=selected_real_kind(31,291)), dimension(size(a,1)) :: abs_err
        where( a/=b )
            abs_err = abs(a-b)
        elsewhere
            abs_err = 0
        end where
    end function abserr_complex_31_291_rank1
    function abserr_complex_31_291_rank2( a,b ) result( abs_err )
        complex(kind=selected_real_kind(31,291)), dimension(:,:), intent(in) :: a
        complex(kind=selected_real_kind(31,291)), dimension(size(a,1),size(a,2)), intent(in) :: b
        real(kind=selected_real_kind(31,291)), dimension(size(a,1),size(a,2)) :: abs_err
        where( a/=b )
            abs_err = abs(a-b)
        elsewhere
            abs_err = 0
        end where
    end function abserr_complex_31_291_rank2

    !--------------------------------------------------------------------------
    ! Procedure assert_abserr
    !--------------------------------------------------------------------------
    
    subroutine assert_abserr_real_6_37_rank0( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(6,37)), intent(in) :: a,b
        real(kind=selected_real_kind(6,37)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(6,37)) :: e
        character(len=40) :: epsabs_str
        
        type(unit_test_error_rank0) :: info
        
        e = abserr(a,b)
        if( e <= epsabs ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            allocate(e_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            write(unit=e_str,fmt=lfmt) e
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_abserr_real_6_37_rank0
    subroutine assert_abserr_real_6_37_rank1( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(6,37)), dimension(:), intent(in) :: a,b
        real(kind=selected_real_kind(6,37)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(6,37)), dimension(size(a,1)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
                write(unit=e_str(i1),fmt=lfmt) e(i1)
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_abserr_real_6_37_rank1
    subroutine assert_abserr_real_6_37_rank2( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(6,37)), dimension(:,:), intent(in) :: a,b
        real(kind=selected_real_kind(6,37)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(6,37)), dimension(size(a,1),size(a,2)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
                write(unit=e_str(i1,i2),fmt=lfmt) e(i1,i2)
            end do
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_abserr_real_6_37_rank2
    subroutine assert_abserr_real_15_307_rank0( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(15,307)), intent(in) :: a,b
        real(kind=selected_real_kind(15,307)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(15,307)) :: e
        character(len=40) :: epsabs_str
        
        type(unit_test_error_rank0) :: info
        
        e = abserr(a,b)
        if( e <= epsabs ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            allocate(e_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            write(unit=e_str,fmt=lfmt) e
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_abserr_real_15_307_rank0
    subroutine assert_abserr_real_15_307_rank1( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(15,307)), dimension(:), intent(in) :: a,b
        real(kind=selected_real_kind(15,307)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(15,307)), dimension(size(a,1)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
                write(unit=e_str(i1),fmt=lfmt) e(i1)
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_abserr_real_15_307_rank1
    subroutine assert_abserr_real_15_307_rank2( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(15,307)), dimension(:,:), intent(in) :: a,b
        real(kind=selected_real_kind(15,307)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(15,307)), dimension(size(a,1),size(a,2)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
                write(unit=e_str(i1,i2),fmt=lfmt) e(i1,i2)
            end do
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_abserr_real_15_307_rank2
    subroutine assert_abserr_real_31_291_rank0( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(31,291)), intent(in) :: a,b
        real(kind=selected_real_kind(31,291)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(31,291)) :: e
        character(len=40) :: epsabs_str
        
        type(unit_test_error_rank0) :: info
        
        e = abserr(a,b)
        if( e <= epsabs ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            allocate(e_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            write(unit=e_str,fmt=lfmt) e
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_abserr_real_31_291_rank0
    subroutine assert_abserr_real_31_291_rank1( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(31,291)), dimension(:), intent(in) :: a,b
        real(kind=selected_real_kind(31,291)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(31,291)), dimension(size(a,1)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
                write(unit=e_str(i1),fmt=lfmt) e(i1)
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_abserr_real_31_291_rank1
    subroutine assert_abserr_real_31_291_rank2( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(31,291)), dimension(:,:), intent(in) :: a,b
        real(kind=selected_real_kind(31,291)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(31,291)), dimension(size(a,1),size(a,2)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
                write(unit=e_str(i1,i2),fmt=lfmt) e(i1,i2)
            end do
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_abserr_real_31_291_rank2
    subroutine assert_abserr_complex_6_37_rank0( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        complex(kind=selected_real_kind(6,37)), intent(in) :: a,b
        real(kind=selected_real_kind(6,37)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(6,37)) :: e
        character(len=40) :: epsabs_str
        
        type(unit_test_error_rank0) :: info
        
        e = abserr(a,b)
        if( e <= epsabs ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            allocate(e_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            write(unit=e_str,fmt=lfmt) e
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_abserr_complex_6_37_rank0
    subroutine assert_abserr_complex_6_37_rank1( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        complex(kind=selected_real_kind(6,37)), dimension(:), intent(in) :: a,b
        real(kind=selected_real_kind(6,37)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(6,37)), dimension(size(a,1)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
                write(unit=e_str(i1),fmt=lfmt) e(i1)
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_abserr_complex_6_37_rank1
    subroutine assert_abserr_complex_6_37_rank2( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        complex(kind=selected_real_kind(6,37)), dimension(:,:), intent(in) :: a,b
        real(kind=selected_real_kind(6,37)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(6,37)), dimension(size(a,1),size(a,2)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
                write(unit=e_str(i1,i2),fmt=lfmt) e(i1,i2)
            end do
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_abserr_complex_6_37_rank2
    subroutine assert_abserr_complex_15_307_rank0( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        complex(kind=selected_real_kind(15,307)), intent(in) :: a,b
        real(kind=selected_real_kind(15,307)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(15,307)) :: e
        character(len=40) :: epsabs_str
        
        type(unit_test_error_rank0) :: info
        
        e = abserr(a,b)
        if( e <= epsabs ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            allocate(e_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            write(unit=e_str,fmt=lfmt) e
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_abserr_complex_15_307_rank0
    subroutine assert_abserr_complex_15_307_rank1( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        complex(kind=selected_real_kind(15,307)), dimension(:), intent(in) :: a,b
        real(kind=selected_real_kind(15,307)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(15,307)), dimension(size(a,1)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
                write(unit=e_str(i1),fmt=lfmt) e(i1)
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_abserr_complex_15_307_rank1
    subroutine assert_abserr_complex_15_307_rank2( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        complex(kind=selected_real_kind(15,307)), dimension(:,:), intent(in) :: a,b
        real(kind=selected_real_kind(15,307)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(15,307)), dimension(size(a,1),size(a,2)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
                write(unit=e_str(i1,i2),fmt=lfmt) e(i1,i2)
            end do
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_abserr_complex_15_307_rank2
    subroutine assert_abserr_complex_31_291_rank0( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        complex(kind=selected_real_kind(31,291)), intent(in) :: a,b
        real(kind=selected_real_kind(31,291)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(31,291)) :: e
        character(len=40) :: epsabs_str
        
        type(unit_test_error_rank0) :: info
        
        e = abserr(a,b)
        if( e <= epsabs ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            allocate(e_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            write(unit=e_str,fmt=lfmt) e
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_abserr_complex_31_291_rank0
    subroutine assert_abserr_complex_31_291_rank1( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        complex(kind=selected_real_kind(31,291)), dimension(:), intent(in) :: a,b
        real(kind=selected_real_kind(31,291)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(31,291)), dimension(size(a,1)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
                write(unit=e_str(i1),fmt=lfmt) e(i1)
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_abserr_complex_31_291_rank1
    subroutine assert_abserr_complex_31_291_rank2( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        complex(kind=selected_real_kind(31,291)), dimension(:,:), intent(in) :: a,b
        real(kind=selected_real_kind(31,291)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(31,291)), dimension(size(a,1),size(a,2)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
                write(unit=e_str(i1,i2),fmt=lfmt) e(i1,i2)
            end do
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_abserr_complex_31_291_rank2

    !--------------------------------------------------------------------------
    ! Procedure relerr
    ! 
    ! These functions never cause floating point errors (i.e., inf-inf)
    !--------------------------------------------------------------------------
    
    function relerr_real_6_37_rank0( a,b ) result( rel_err )
        real(kind=selected_real_kind(6,37)), intent(in) :: a
        real(kind=selected_real_kind(6,37)), intent(in) :: b
        real(kind=selected_real_kind(6,37)) :: rel_err
        if( a/=b ) then
            rel_err = abs((a-b)/a)
        else
            rel_err = 0
        end if
    end function relerr_real_6_37_rank0
    function relerr_real_6_37_rank1( a,b ) result( rel_err )
        real(kind=selected_real_kind(6,37)), dimension(:), intent(in) :: a
        real(kind=selected_real_kind(6,37)), dimension(size(a,1)), intent(in) :: b
        real(kind=selected_real_kind(6,37)), dimension(size(a,1)) :: rel_err
        where( a/=b )
            rel_err = abs((a-b)/a)
        elsewhere
            rel_err = 0
        end where
    end function relerr_real_6_37_rank1
    function relerr_real_6_37_rank2( a,b ) result( rel_err )
        real(kind=selected_real_kind(6,37)), dimension(:,:), intent(in) :: a
        real(kind=selected_real_kind(6,37)), dimension(size(a,1),size(a,2)), intent(in) :: b
        real(kind=selected_real_kind(6,37)), dimension(size(a,1),size(a,2)) :: rel_err
        where( a/=b )
            rel_err = abs((a-b)/a)
        elsewhere
            rel_err = 0
        end where
    end function relerr_real_6_37_rank2
    function relerr_real_15_307_rank0( a,b ) result( rel_err )
        real(kind=selected_real_kind(15,307)), intent(in) :: a
        real(kind=selected_real_kind(15,307)), intent(in) :: b
        real(kind=selected_real_kind(15,307)) :: rel_err
        if( a/=b ) then
            rel_err = abs((a-b)/a)
        else
            rel_err = 0
        end if
    end function relerr_real_15_307_rank0
    function relerr_real_15_307_rank1( a,b ) result( rel_err )
        real(kind=selected_real_kind(15,307)), dimension(:), intent(in) :: a
        real(kind=selected_real_kind(15,307)), dimension(size(a,1)), intent(in) :: b
        real(kind=selected_real_kind(15,307)), dimension(size(a,1)) :: rel_err
        where( a/=b )
            rel_err = abs((a-b)/a)
        elsewhere
            rel_err = 0
        end where
    end function relerr_real_15_307_rank1
    function relerr_real_15_307_rank2( a,b ) result( rel_err )
        real(kind=selected_real_kind(15,307)), dimension(:,:), intent(in) :: a
        real(kind=selected_real_kind(15,307)), dimension(size(a,1),size(a,2)), intent(in) :: b
        real(kind=selected_real_kind(15,307)), dimension(size(a,1),size(a,2)) :: rel_err
        where( a/=b )
            rel_err = abs((a-b)/a)
        elsewhere
            rel_err = 0
        end where
    end function relerr_real_15_307_rank2
    function relerr_real_31_291_rank0( a,b ) result( rel_err )
        real(kind=selected_real_kind(31,291)), intent(in) :: a
        real(kind=selected_real_kind(31,291)), intent(in) :: b
        real(kind=selected_real_kind(31,291)) :: rel_err
        if( a/=b ) then
            rel_err = abs((a-b)/a)
        else
            rel_err = 0
        end if
    end function relerr_real_31_291_rank0
    function relerr_real_31_291_rank1( a,b ) result( rel_err )
        real(kind=selected_real_kind(31,291)), dimension(:), intent(in) :: a
        real(kind=selected_real_kind(31,291)), dimension(size(a,1)), intent(in) :: b
        real(kind=selected_real_kind(31,291)), dimension(size(a,1)) :: rel_err
        where( a/=b )
            rel_err = abs((a-b)/a)
        elsewhere
            rel_err = 0
        end where
    end function relerr_real_31_291_rank1
    function relerr_real_31_291_rank2( a,b ) result( rel_err )
        real(kind=selected_real_kind(31,291)), dimension(:,:), intent(in) :: a
        real(kind=selected_real_kind(31,291)), dimension(size(a,1),size(a,2)), intent(in) :: b
        real(kind=selected_real_kind(31,291)), dimension(size(a,1),size(a,2)) :: rel_err
        where( a/=b )
            rel_err = abs((a-b)/a)
        elsewhere
            rel_err = 0
        end where
    end function relerr_real_31_291_rank2
    function relerr_complex_6_37_rank0( a,b ) result( rel_err )
        complex(kind=selected_real_kind(6,37)), intent(in) :: a
        complex(kind=selected_real_kind(6,37)), intent(in) :: b
        complex(kind=selected_real_kind(6,37)) :: rel_err
        if( a/=b ) then
            rel_err = abs((a-b)/a)
        else
            rel_err = 0
        end if
    end function relerr_complex_6_37_rank0
    function relerr_complex_6_37_rank1( a,b ) result( rel_err )
        complex(kind=selected_real_kind(6,37)), dimension(:), intent(in) :: a
        complex(kind=selected_real_kind(6,37)), dimension(size(a,1)), intent(in) :: b
        complex(kind=selected_real_kind(6,37)), dimension(size(a,1)) :: rel_err
        where( a/=b )
            rel_err = abs((a-b)/a)
        elsewhere
            rel_err = 0
        end where
    end function relerr_complex_6_37_rank1
    function relerr_complex_6_37_rank2( a,b ) result( rel_err )
        complex(kind=selected_real_kind(6,37)), dimension(:,:), intent(in) :: a
        complex(kind=selected_real_kind(6,37)), dimension(size(a,1),size(a,2)), intent(in) :: b
        complex(kind=selected_real_kind(6,37)), dimension(size(a,1),size(a,2)) :: rel_err
        where( a/=b )
            rel_err = abs((a-b)/a)
        elsewhere
            rel_err = 0
        end where
    end function relerr_complex_6_37_rank2
    function relerr_complex_15_307_rank0( a,b ) result( rel_err )
        complex(kind=selected_real_kind(15,307)), intent(in) :: a
        complex(kind=selected_real_kind(15,307)), intent(in) :: b
        complex(kind=selected_real_kind(15,307)) :: rel_err
        if( a/=b ) then
            rel_err = abs((a-b)/a)
        else
            rel_err = 0
        end if
    end function relerr_complex_15_307_rank0
    function relerr_complex_15_307_rank1( a,b ) result( rel_err )
        complex(kind=selected_real_kind(15,307)), dimension(:), intent(in) :: a
        complex(kind=selected_real_kind(15,307)), dimension(size(a,1)), intent(in) :: b
        complex(kind=selected_real_kind(15,307)), dimension(size(a,1)) :: rel_err
        where( a/=b )
            rel_err = abs((a-b)/a)
        elsewhere
            rel_err = 0
        end where
    end function relerr_complex_15_307_rank1
    function relerr_complex_15_307_rank2( a,b ) result( rel_err )
        complex(kind=selected_real_kind(15,307)), dimension(:,:), intent(in) :: a
        complex(kind=selected_real_kind(15,307)), dimension(size(a,1),size(a,2)), intent(in) :: b
        complex(kind=selected_real_kind(15,307)), dimension(size(a,1),size(a,2)) :: rel_err
        where( a/=b )
            rel_err = abs((a-b)/a)
        elsewhere
            rel_err = 0
        end where
    end function relerr_complex_15_307_rank2
    function relerr_complex_31_291_rank0( a,b ) result( rel_err )
        complex(kind=selected_real_kind(31,291)), intent(in) :: a
        complex(kind=selected_real_kind(31,291)), intent(in) :: b
        complex(kind=selected_real_kind(31,291)) :: rel_err
        if( a/=b ) then
            rel_err = abs((a-b)/a)
        else
            rel_err = 0
        end if
    end function relerr_complex_31_291_rank0
    function relerr_complex_31_291_rank1( a,b ) result( rel_err )
        complex(kind=selected_real_kind(31,291)), dimension(:), intent(in) :: a
        complex(kind=selected_real_kind(31,291)), dimension(size(a,1)), intent(in) :: b
        complex(kind=selected_real_kind(31,291)), dimension(size(a,1)) :: rel_err
        where( a/=b )
            rel_err = abs((a-b)/a)
        elsewhere
            rel_err = 0
        end where
    end function relerr_complex_31_291_rank1
    function relerr_complex_31_291_rank2( a,b ) result( rel_err )
        complex(kind=selected_real_kind(31,291)), dimension(:,:), intent(in) :: a
        complex(kind=selected_real_kind(31,291)), dimension(size(a,1),size(a,2)), intent(in) :: b
        complex(kind=selected_real_kind(31,291)), dimension(size(a,1),size(a,2)) :: rel_err
        where( a/=b )
            rel_err = abs((a-b)/a)
        elsewhere
            rel_err = 0
        end where
    end function relerr_complex_31_291_rank2

    !--------------------------------------------------------------------------
    ! Procedure assert_relerr
    !--------------------------------------------------------------------------
    
    subroutine assert_relerr_real_6_37_rank0( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(6,37)), intent(in) :: a,b
        real(kind=selected_real_kind(6,37)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(6,37)) :: e
        character(len=40) :: epsabs_str
        
        type(unit_test_error_rank0) :: info
        
        e = abserr(a,b)
        if( e <= epsabs ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            allocate(e_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            write(unit=e_str,fmt=lfmt) e
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_relerr_real_6_37_rank0
    subroutine assert_relerr_real_6_37_rank1( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(6,37)), dimension(:), intent(in) :: a,b
        real(kind=selected_real_kind(6,37)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(6,37)), dimension(size(a,1)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
                write(unit=e_str(i1),fmt=lfmt) e(i1)
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_relerr_real_6_37_rank1
    subroutine assert_relerr_real_6_37_rank2( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(6,37)), dimension(:,:), intent(in) :: a,b
        real(kind=selected_real_kind(6,37)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(6,37)), dimension(size(a,1),size(a,2)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
                write(unit=e_str(i1,i2),fmt=lfmt) e(i1,i2)
            end do
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_relerr_real_6_37_rank2
    subroutine assert_relerr_real_15_307_rank0( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(15,307)), intent(in) :: a,b
        real(kind=selected_real_kind(15,307)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(15,307)) :: e
        character(len=40) :: epsabs_str
        
        type(unit_test_error_rank0) :: info
        
        e = abserr(a,b)
        if( e <= epsabs ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            allocate(e_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            write(unit=e_str,fmt=lfmt) e
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_relerr_real_15_307_rank0
    subroutine assert_relerr_real_15_307_rank1( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(15,307)), dimension(:), intent(in) :: a,b
        real(kind=selected_real_kind(15,307)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(15,307)), dimension(size(a,1)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
                write(unit=e_str(i1),fmt=lfmt) e(i1)
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_relerr_real_15_307_rank1
    subroutine assert_relerr_real_15_307_rank2( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(15,307)), dimension(:,:), intent(in) :: a,b
        real(kind=selected_real_kind(15,307)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(15,307)), dimension(size(a,1),size(a,2)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
                write(unit=e_str(i1,i2),fmt=lfmt) e(i1,i2)
            end do
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_relerr_real_15_307_rank2
    subroutine assert_relerr_real_31_291_rank0( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(31,291)), intent(in) :: a,b
        real(kind=selected_real_kind(31,291)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(31,291)) :: e
        character(len=40) :: epsabs_str
        
        type(unit_test_error_rank0) :: info
        
        e = abserr(a,b)
        if( e <= epsabs ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            allocate(e_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            write(unit=e_str,fmt=lfmt) e
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_relerr_real_31_291_rank0
    subroutine assert_relerr_real_31_291_rank1( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(31,291)), dimension(:), intent(in) :: a,b
        real(kind=selected_real_kind(31,291)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(31,291)), dimension(size(a,1)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
                write(unit=e_str(i1),fmt=lfmt) e(i1)
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_relerr_real_31_291_rank1
    subroutine assert_relerr_real_31_291_rank2( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        real(kind=selected_real_kind(31,291)), dimension(:,:), intent(in) :: a,b
        real(kind=selected_real_kind(31,291)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(31,291)), dimension(size(a,1),size(a,2)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
                write(unit=e_str(i1,i2),fmt=lfmt) e(i1,i2)
            end do
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_relerr_real_31_291_rank2
    subroutine assert_relerr_complex_6_37_rank0( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        complex(kind=selected_real_kind(6,37)), intent(in) :: a,b
        real(kind=selected_real_kind(6,37)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(6,37)) :: e
        character(len=40) :: epsabs_str
        
        type(unit_test_error_rank0) :: info
        
        e = abserr(a,b)
        if( e <= epsabs ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            allocate(e_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            write(unit=e_str,fmt=lfmt) e
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_relerr_complex_6_37_rank0
    subroutine assert_relerr_complex_6_37_rank1( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        complex(kind=selected_real_kind(6,37)), dimension(:), intent(in) :: a,b
        real(kind=selected_real_kind(6,37)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(6,37)), dimension(size(a,1)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
                write(unit=e_str(i1),fmt=lfmt) e(i1)
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_relerr_complex_6_37_rank1
    subroutine assert_relerr_complex_6_37_rank2( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        complex(kind=selected_real_kind(6,37)), dimension(:,:), intent(in) :: a,b
        real(kind=selected_real_kind(6,37)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(6,37)), dimension(size(a,1),size(a,2)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES11.6")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
                write(unit=e_str(i1,i2),fmt=lfmt) e(i1,i2)
            end do
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_relerr_complex_6_37_rank2
    subroutine assert_relerr_complex_15_307_rank0( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        complex(kind=selected_real_kind(15,307)), intent(in) :: a,b
        real(kind=selected_real_kind(15,307)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(15,307)) :: e
        character(len=40) :: epsabs_str
        
        type(unit_test_error_rank0) :: info
        
        e = abserr(a,b)
        if( e <= epsabs ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            allocate(e_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            write(unit=e_str,fmt=lfmt) e
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_relerr_complex_15_307_rank0
    subroutine assert_relerr_complex_15_307_rank1( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        complex(kind=selected_real_kind(15,307)), dimension(:), intent(in) :: a,b
        real(kind=selected_real_kind(15,307)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(15,307)), dimension(size(a,1)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
                write(unit=e_str(i1),fmt=lfmt) e(i1)
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_relerr_complex_15_307_rank1
    subroutine assert_relerr_complex_15_307_rank2( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        complex(kind=selected_real_kind(15,307)), dimension(:,:), intent(in) :: a,b
        real(kind=selected_real_kind(15,307)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(15,307)), dimension(size(a,1),size(a,2)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES21.15")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
                write(unit=e_str(i1,i2),fmt=lfmt) e(i1,i2)
            end do
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_relerr_complex_15_307_rank2
    subroutine assert_relerr_complex_31_291_rank0( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        complex(kind=selected_real_kind(31,291)), intent(in) :: a,b
        real(kind=selected_real_kind(31,291)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(31,291)) :: e
        character(len=40) :: epsabs_str
        
        type(unit_test_error_rank0) :: info
        
        e = abserr(a,b)
        if( e <= epsabs ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str,source=repeat(" ",lfmt_width))
            allocate(b_str,source=repeat(" ",lfmt_width))
            allocate(e_str,source=repeat(" ",lfmt_width))
            
            write(unit=a_str,fmt=lfmt) a
            write(unit=b_str,fmt=lfmt) b
            write(unit=e_str,fmt=lfmt) e
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_relerr_complex_31_291_rank0
    subroutine assert_relerr_complex_31_291_rank1( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        complex(kind=selected_real_kind(31,291)), dimension(:), intent(in) :: a,b
        real(kind=selected_real_kind(31,291)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(31,291)), dimension(size(a,1)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1
        type(unit_test_error_rank1) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
                write(unit=a_str(i1),fmt=lfmt) a(i1)
                write(unit=b_str(i1),fmt=lfmt) b(i1)
                write(unit=e_str(i1),fmt=lfmt) e(i1)
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_relerr_complex_31_291_rank1
    subroutine assert_relerr_complex_31_291_rank2( a, b, epsabs, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt )
        complex(kind=selected_real_kind(31,291)), dimension(:,:), intent(in) :: a,b
        real(kind=selected_real_kind(31,291)), intent(in) :: epsabs
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        
        ! Local variables
        character(:), dimension(:,:), allocatable :: a_str, b_str, e_str
        character(len=40) :: lfmt
        integer :: lfmt_width
        real(kind=selected_real_kind(31,291)), dimension(size(a,1),size(a,2)) :: e
        character(len=40) :: epsabs_str
        
        integer :: i1,i2
        type(unit_test_error_rank2) :: info
        
        ! Ensure the correct array sizes TODO: precondition
        if( .not. assert_array_shape( shape(a),shape(b), &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) ) return
        
        e = abserr(a,b)
        if( all( e <= epsabs ) ) then
            call assertion_succeeded()
        else
            ! Export the data as character string
            lfmt = "("//optional_character(fmt,"ES37.31")//")"
            lfmt_width = fmt_width( lfmt )
            allocate(a_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(b_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            allocate(e_str(size(a,1),size(a,2)),source=repeat(" ",lfmt_width))
            
            do i1=1,size(a,1)
            do i2=1,size(a,2)
                write(unit=a_str(i1,i2),fmt=lfmt) a(i1,i2)
                write(unit=b_str(i1,i2),fmt=lfmt) b(i1,i2)
                write(unit=e_str(i1,i2),fmt=lfmt) e(i1,i2)
            end do
            end do
            
            write(unit=epsabs_str,fmt="(ES7.1)") epsabs
            
            ! Populate common info
            info%filename = optional_character( filename, "" )
            info%comment = optional_character( comment, "" )
            info%line = optional_integer( line, -1 )
            
            ! Populate error_info type specific for this rank
            info%diff = .not. ( e <= epsabs )
            info%a = a_str
            info%b = b_str
            info%a_name = optional_character( a_name, "a" )
            info%b_name = optional_character( b_name, "b" )
            info%statement = optional_character( statement, &
                    "|" // info%a_name // "-" // info%b_name // "| <= " // epsabs_str )
            
            ! TODO: check class invariants info
            
            ! Populate additional information
            info%show_difference_marks = .true.
            info%extra = e_str
            info%extra_name = "abserr"
            
            ! Create the error and report failed
            call create_error( ifail, info )
            call assertion_failed()
        end if
    end subroutine assert_relerr_complex_31_291_rank2


    !--------------------------------------------------------------------------
    ! Miscellaneous
    !--------------------------------------------------------------------------
    
    recursive function assert_array_shape( shape_a,shape_b, &
                            comment, ifail, statement,a_name,b_name,filename,line,fmt ) result( equal_shape )
        integer, dimension(:), intent(in) :: shape_a, shape_b
        
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment, statement, fmt
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail
        logical :: equal_shape
        
        equal_shape = .false. 
        if( size(shape_a) /= size(shape_b) ) then
            call assert_eq( size(shape_a), size(shape_b), statement=statement, & 
                    a_name=a_name, b_name=b_name, filename=filename, line=line, &
                    comment=optional_character(comment) // "ranks differ", ifail=ifail, fmt=fmt )
            return
        end if
        if( any(shape_a /= shape_b) ) then
            ! Cannot cause infinite recursion because the arrays have the same size
            call assert_eq( shape_a, shape_b, statement=statement, & 
                    a_name="shape(" // optional_character(a_name,"a") // ")", &
                    b_name="shape(" // optional_character(b_name,"b") // ")", filename=filename, line=line, &
                    comment=trim(optional_character(comment)) // " sizes differ", ifail=ifail, fmt=fmt )
            return
        end if
        equal_shape = .true.
        
    end function assert_array_shape
    
    function optional_logical( a, default )
        logical, intent(in), optional :: a
        logical, intent(in) :: default
        logical :: optional_logical
        if( present(a) ) then
            optional_logical = a
        else
            optional_logical = default
        end if
    end function optional_logical
    function optional_integer( a, default )
        integer, intent(in), optional :: a
        integer, intent(in) :: default
        integer :: optional_integer
        if( present(a) ) then
            optional_integer = a
        else
            optional_integer = default
        end if
    end function optional_integer
    function optional_character( a, default ) result( name )
        character(len=*), intent(in), optional :: a, default
        character(len=max(len(a),len(default))) :: name
        
        name = optional_allocatable_character( a, default=default )
        
    end function optional_character
    function optional_allocatable_character( a, b, default ) result( name )
        character(len=*), intent(in), optional :: a, default
        character(:), allocatable, intent(in), optional :: b
        character(len=40) :: name
        
        name = ""
        if( present(default) ) then
            name = default
        end if
        if( present(b) ) then
            if( allocated(b) ) then
                name = b
            end if
        end if
        if( present(a) ) then
            if( len_trim(a) > 0 ) then
                name = a
            end if
        end if
        
    end function optional_allocatable_character
    
    pure function fmt_width( fmt ) result( width )
        character(len=*), intent(in) :: fmt
        integer :: width
        
        integer :: start_width, end_width
        
        start_width = scan(fmt,"FILESAN",back=.true.) + 1
        end_width = scan(fmt,".)") - 1
        if( end_width < 0 ) end_width = len_trim(fmt)
        
        read(unit=fmt(start_width:end_width),fmt=*) width
        
    end function fmt_width

end module error_handling_unit_test