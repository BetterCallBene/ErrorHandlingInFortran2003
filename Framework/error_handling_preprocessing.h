
// ERROR_HANDLING_PREPROCESSING
// 
//   Collection of macros that simplify the use of the error_handling module.
// 
// HISTORY
// 
//   20111109 KP - Initial version
//   20111110 KP - Ported to auto-generated system
//   20111215 (KP) - Re-generated (make autogenerated)
// 
// AUTHOR
// 
//   Koen Poppe, Department of Computer Science,
//   Katholieke Universiteit Leuven, Celestijnenlaan 200A,
//   B-3001 Heverlee, Belgium
//   Email: Koen.Poppe@cs.kuleuven.be
//

// Stringification
#define xstr(s) str(s)
#define str(s) #s


// assert_eq
#define __ensure_eq(a,b,...) \
    call assert_eq( a,b,__VA_ARGS__,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ )
#define __ensure_eq_ifail(a,b,...) \
    call assert_eq( a,b,__VA_ARGS__,ifail,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ ); \
    if( is_error(ifail) ) return
#define __require_eq(a,b,...) \
    call assert_eq( a,b,__VA_ARGS__,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ )
#define __require_eq_ifail(a,b,...) \
    call assert_eq( a,b,__VA_ARGS__,ifail,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ ); \
    if( is_error(ifail) ) return

// assert_ne
#define __ensure_ne(a,b,...) \
    call assert_ne( a,b,__VA_ARGS__,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ )
#define __ensure_ne_ifail(a,b,...) \
    call assert_ne( a,b,__VA_ARGS__,ifail,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ ); \
    if( is_error(ifail) ) return
#define __require_ne(a,b,...) \
    call assert_ne( a,b,__VA_ARGS__,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ )
#define __require_ne_ifail(a,b,...) \
    call assert_ne( a,b,__VA_ARGS__,ifail,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ ); \
    if( is_error(ifail) ) return

// assert_lt
#define __ensure_lt(a,b,...) \
    call assert_lt( a,b,__VA_ARGS__,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ )
#define __ensure_lt_ifail(a,b,...) \
    call assert_lt( a,b,__VA_ARGS__,ifail,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ ); \
    if( is_error(ifail) ) return
#define __require_lt(a,b,...) \
    call assert_lt( a,b,__VA_ARGS__,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ )
#define __require_lt_ifail(a,b,...) \
    call assert_lt( a,b,__VA_ARGS__,ifail,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ ); \
    if( is_error(ifail) ) return

// assert_le
#define __ensure_le(a,b,...) \
    call assert_le( a,b,__VA_ARGS__,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ )
#define __ensure_le_ifail(a,b,...) \
    call assert_le( a,b,__VA_ARGS__,ifail,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ ); \
    if( is_error(ifail) ) return
#define __require_le(a,b,...) \
    call assert_le( a,b,__VA_ARGS__,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ )
#define __require_le_ifail(a,b,...) \
    call assert_le( a,b,__VA_ARGS__,ifail,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ ); \
    if( is_error(ifail) ) return

// assert_gt
#define __ensure_gt(a,b,...) \
    call assert_gt( a,b,__VA_ARGS__,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ )
#define __ensure_gt_ifail(a,b,...) \
    call assert_gt( a,b,__VA_ARGS__,ifail,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ ); \
    if( is_error(ifail) ) return
#define __require_gt(a,b,...) \
    call assert_gt( a,b,__VA_ARGS__,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ )
#define __require_gt_ifail(a,b,...) \
    call assert_gt( a,b,__VA_ARGS__,ifail,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ ); \
    if( is_error(ifail) ) return

// assert_ge
#define __ensure_ge(a,b,...) \
    call assert_ge( a,b,__VA_ARGS__,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ )
#define __ensure_ge_ifail(a,b,...) \
    call assert_ge( a,b,__VA_ARGS__,ifail,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ ); \
    if( is_error(ifail) ) return
#define __require_ge(a,b,...) \
    call assert_ge( a,b,__VA_ARGS__,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ )
#define __require_ge_ifail(a,b,...) \
    call assert_ge( a,b,__VA_ARGS__,ifail,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ ); \
    if( is_error(ifail) ) return

// assert_abserr
#define __ensure_abserr(a,b,...) \
    call assert_abserr( a,b,__VA_ARGS__,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ )
#define __ensure_abserr_ifail(a,b,...) \
    call assert_abserr( a,b,__VA_ARGS__,ifail,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ ); \
    if( is_error(ifail) ) return
#define __require_abserr(a,b,...) \
    call assert_abserr( a,b,__VA_ARGS__,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ )
#define __require_abserr_ifail(a,b,...) \
    call assert_abserr( a,b,__VA_ARGS__,ifail,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ ); \
    if( is_error(ifail) ) return

// assert_relerr
#define __ensure_relerr(a,b,...) \
    call assert_relerr( a,b,__VA_ARGS__,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ )
#define __ensure_relerr_ifail(a,b,...) \
    call assert_relerr( a,b,__VA_ARGS__,ifail,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ ); \
    if( is_error(ifail) ) return
#define __require_relerr(a,b,...) \
    call assert_relerr( a,b,__VA_ARGS__,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ )
#define __require_relerr_ifail(a,b,...) \
    call assert_relerr( a,b,__VA_ARGS__,ifail,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ ); \
    if( is_error(ifail) ) return
