<?xml version="1.0"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" xmlns:str="http://exslt.org/strings">
	<xsl:output omit-xml-declaration="yes"	method="text"/>

	<xsl:variable name="ASSERT_OPTIONS">
		<xsl:text>a_name,b_name,filename,line,comment, ifail</xsl:text>
	</xsl:variable>
	<xsl:variable name="ASSERT_OPTIONS_DECLARATION"><xsl:text/>
        character(len=*), intent(in), optional :: a_name,b_name,filename,comment
        integer, intent(in), optional :: line
        type(error), intent(out), optional :: ifail<xsl:text/>
	</xsl:variable>
	<xsl:variable name="ASSERT_OPTIONS_TYPEDECLARATION">
        <xsl:text/>character(:), allocatable :: a_name,b_name,filename
        integer :: line = -1<xsl:text/>
	</xsl:variable>
	<xsl:template name="assert-options-typeassignment">
		<xsl:param name="condition"/>
			! Populate error_info type
			info%a_name = optional_name( a_name, "" )
			info%b_name = optional_name( b_name, "" )
			info%filename = optional_name( filename, "" )
			if( present(line) ) then
			    info%line = line
			else
			    info%line = -1
			end if

			info%diff = .not. ( <xsl:value-of select="$condition"/> )
			info%a = a_str
			info%b = b_str
	</xsl:template>
	
	<!-- MAIN -->
	
	<xsl:template match="unittest">
<xsl:text/>! ERROR_HANDLING_UNIT_TEST
! 
!   Collection of wrapper arround commonly used routines that need to check 
!   some condition.
! 
! HISTORY
! 
!   20110217 KP - Initial version
!   20110412 KP - Ported to autogenerated system
!   <xsl:value-of select="$isoD"/> (KP) - Re-generated
! 
! AUTHOR
! 
!   Koen Poppe, Department of Computer Science,
!   Katholieke Universiteit Leuven, Celestijnenlaan 200A,
!   B-3001 Heverlee, Belgium
!   Email:	Koen.Poppe@cs.kuleuven.be
!
module error_handling_unit_test
    use error_handling_error
    use design_by_contract
    implicit none
    private
    save
<xsl:text/>

    ! Primitives
    public :: assert
    interface assert
    	module procedure assert_logical
    end interface assert
    public :: assert_fail
    public :: assert_success

    ! Unit testing
    integer, public :: OUTPUT_WIDTH = 80 ! Maximal width of the output
    character(len=5), parameter :: indent = ""
    integer :: ntest = -1, nfail = -1
    character(len=32) :: module_name

    public :: unit_test_reset
    public :: unit_test_results
    public :: write_unit_test_report
    
    ! Reports and error types
    ! 20110413 KP - Should become obsolete
    private :: assert_report
    interface assert_report
        module procedure assert_rank0_report
        module procedure assert_rank1_report
        module procedure assert_rank2_report
    end interface

    type, extends(dbc_error), public :: unit_test_error
        <xsl:value-of select="$ASSERT_OPTIONS_TYPEDECLARATION"/>
    end type unit_test_error

<xsl:for-each select="exsl:node-set($ranks)/*[ . &lt; 3]">
    type, extends(unit_test_error) :: unit_test_error_rank<xsl:value-of select="."/>
        logical<xsl:call-template name="rank-specification"><xsl:with-param name="rank" select="."/></xsl:call-template><xsl:if test=". &gt; 0">, allocatable</xsl:if> :: diff
        character(:)<xsl:call-template name="rank-specification"><xsl:with-param name="rank" select="."/></xsl:call-template>, allocatable :: a,b
    contains
        procedure :: info_message => unit_test_error_info_message_rank<xsl:value-of select="."/>
    end type unit_test_error_rank<xsl:value-of select="."/>
</xsl:for-each>

    ! Automatic generated
<xsl:call-template name="interfaces"/>
contains<xsl:text/>

    !--------------------------------------------------------------------------
    ! Primitives
    !--------------------------------------------------------------------------

    ! Test if the &lt;expression&gt; evaluates to .true. If not, a warning is
    ! issued with the &lt;statement&gt; and, optionally, the &lt;comment&gt; argument.
    ! The preprocessor macros also supply the &lt;filename&gt; and &lt;line&gt;.
    !
    ! The test report is updated accordingly.
    !
    subroutine assert_logical( expression, <xsl:value-of select="$ASSERT_OPTIONS"/> )

        logical, intent(in) :: expression
        <xsl:value-of select="$ASSERT_OPTIONS_DECLARATION"/>

        if( ntest &gt;= 0 ) then
            ntest = ntest + 1
        end if
        if( expression ) then
            ! nothing to do, it worked
        else
            write(unit=*,fmt="(A)") "***"
            if( len_trim(module_name) &gt; 0 ) then
                write(unit=*,fmt="(3A)") " ", trim(module_name), ", "
            end if
        
            if( nfail &gt;= 0 ) then
                nfail = nfail + 1
                write(unit=*,fmt="(A,I4)",advance="no") &amp;
                    "Test", ntest
            else
                 write(unit=*,fmt="(A)",advance="no") &amp;
                    "Run-time check: "
            end if
        
            if( present(line) ) then
                write(unit=*,fmt="(A,I4)",advance="no") "@",line
            else
                write(unit=*,fmt="(A5)",advance="no") ""
            end if

            write(unit=*,fmt="(2A)",advance="no") ": ", " trim( statement )"

            if( present(comment) ) then
                write(unit=*,fmt="(3A)") ": ", trim(comment), "; failed..."
            else
                write(unit=*,fmt="(A)") " failed..."
            end if
        end if

    end subroutine assert_logical

    subroutine assert_fail( <xsl:value-of select="$ASSERT_OPTIONS"/> )
        <xsl:value-of select="$ASSERT_OPTIONS_DECLARATION"/>
        call assert_logical( .false., <xsl:value-of select="$ASSERT_OPTIONS"/> )
    end subroutine assert_fail

    subroutine assert_success( <xsl:value-of select="$ASSERT_OPTIONS"/> )
        <xsl:value-of select="$ASSERT_OPTIONS_DECLARATION"/>
        call assert_logical( .true., <xsl:value-of select="$ASSERT_OPTIONS"/> )
    end subroutine assert_success

    !--------------------------------------------------------------------------
    ! Unit testing
    !--------------------------------------------------------------------------

    ! Reset the test results
    subroutine unit_test_reset(name)
        character(len=*),intent(in), optional :: name
        ntest = 0
        nfail = 0
        module_name = ""
        if( present(name) ) then
            module_name = name
        end if
    end subroutine unit_test_reset

    ! Returns the results of the test so far.
    subroutine unit_test_results(nb_passed,nb_failed,nb_tests)
        integer, intent( out ), optional :: nb_passed, nb_failed, nb_tests
        if( present( nb_passed ) ) nb_passed = ntest-nfail
        if( present( nb_failed ) ) nb_failed = nfail
        if( present( nb_tests  ) ) nb_tests     = ntest
    end subroutine unit_test_results

    ! Write the test report in a fashion compatible to the test warnings.
    subroutine write_unit_test_report()
        integer :: nb_failed, nb_tests
        call unit_test_results(nb_failed=nb_failed, nb_tests=nb_tests)
        if( nb_failed == 0 ) then
            write(unit=*,fmt="(A,I3,2A)") "     [OK] ", nb_tests, " tests passed. ", trim(module_name)
        else
            write(unit=*,fmt="(A,I3,2A)") &amp;
                "  [??] ", nb_failed, " tests FAILED. ", trim(module_name)
        end if
    end subroutine write_unit_test_report

    !--------------------------------------------------------------------------
    ! Reporting
    !--------------------------------------------------------------------------

    subroutine assert_rank0_report( diff, a,b, <xsl:value-of select="$ASSERT_OPTIONS"/>, extra,extra_name )
        logical, intent(in) :: diff
        character(len=*), intent(in) :: a,b
        character(len=*), intent(in), optional :: extra
        character(len=*), intent(in), optional :: extra_name
        <xsl:value-of select="$ASSERT_OPTIONS_DECLARATION"/>

        call assert_fail( <xsl:value-of select="$ASSERT_OPTIONS"/> )
        write(unit=*,fmt="(2(A,I0),A)") " [??] elements differ"

    end subroutine assert_rank0_report

    subroutine assert_rank1_report( diff, a,b, <xsl:value-of select="$ASSERT_OPTIONS"/>, extra,extra_name, idx_row, recursion )
        logical, dimension(:), intent(in) :: diff
        character(len=*), dimension(:), intent(in) :: a,b
        character(len=*), dimension(:), intent(in), optional :: extra
        character(len=*), intent(in), optional :: extra_name
        character(len=*), dimension(:), intent(in), optional :: idx_row
        logical, intent(in), optional :: recursion
        <xsl:value-of select="$ASSERT_OPTIONS_DECLARATION"/>
    
        integer, dimension(:), allocatable :: diff_idx
        integer :: i,j, w, nb, nb_diff, max_row, row, idx, name_width
        character(len=40) :: fmt_str, la_name, lb_name, trailing
        character(len=3), parameter :: eqs = " = ", sep = " | ", blk = "   "
        character(len=len(blk)) :: sep_or_blk
        character(len=len(a(1))), dimension(size(a)) :: diff_str, the_row
    
        la_name = optional_name(a_name,"a")
        lb_name = optional_name(b_name,"b")
        name_width = max(len_trim(la_name),len_trim(lb_name))
        if( present(extra_name) ) then
            name_width = max(name_width,len_trim(extra_name))
        end if
    
        w = len(a(1))
        nb = size(diff)
        nb_diff = count(diff)
        allocate(diff_idx(nb_diff))
        diff_idx = pack( (/ (i,i=1,nb) /), diff )
    
        diff_str = " "
        do i=1,nb_diff
            idx = diff_idx(i)
            do j=1,len(a(idx))
                if( a(idx)(j:j) /= b(idx)(j:j) ) then
                    diff_str(idx)(j:j) = "^"
                else
                    diff_str(idx)(j:j) = "-"
                end if
            end do
        end do
    
        if( .not. optional_logical( recursion,.false. ) ) then
            call assert_fail( <xsl:value-of select="$ASSERT_OPTIONS"/> )
            write(unit=*,fmt="(2(A,I0),A)") " [??] ", nb_diff, " of ", nb, " elements differ: "
        end if

        max_row = (OUTPUT_WIDTH-name_width)/(w+len(sep))
        if( optional_logical( recursion,.false.) .or. (nb &lt;= max_row .and. .not. present(idx_row)) ) then
            if( nb &gt; max_row ) then
                nb = max_row
                write(unit=trailing,fmt="(2A)") sep, "..."
            else
                trailing = ""
            end if
        
            if( nb == 1 ) then
                write(unit=fmt_str,fmt="(2(A,I0),A)") "(A",name_width,",A,A",w,",A)"
            else
                write(unit=fmt_str,fmt="(2(A,I0),A,I0,3A,I0,A)") "(A",name_width,",A,A",w,",",nb-1,"('", sep, "',A",w,"),A)"
            end if
            write(unit=*,fmt=fmt_str) trim(la_name), eqs, a(1:nb), trim(trailing)
            write(unit=*,fmt=fmt_str) trim(lb_name), eqs, b(1:nb), trim(trailing)

            if( nb == 1 ) then
                write(unit=fmt_str,fmt="(2(A,I0),A)") "(A",name_width+len(eqs),",A",w,",A)"
            else
                write(unit=fmt_str,fmt="(2(A,I0),A,I0,3A,I0,A)") "(A",name_width+len(eqs),",A",w,",",nb-1,"('", blk, "',A",w,"),A)"
            end if
            write(unit=*,fmt=fmt_str) "", diff_str(1:nb), trim(trailing)
        
            if( present(extra) ) then
                if( nb == 1 ) then
                    write(unit=fmt_str,fmt="(2(A,I0),A)") "(A",name_width,",A,A",w,",A)"
                else
                    write(unit=fmt_str,fmt="(2(A,I0),A,I0,3A,I0,A)") "(A",name_width,",A,A",w,",",nb-1,"('", sep, "',A",w,"),A)"
                end if
                if( present(extra_name) ) then
                    write(unit=*,fmt=fmt_str) extra_name, eqs, extra(1:nb), trim(trailing)
                else
                    write(unit=*,fmt=fmt_str) "", eqs, extra(1:nb), trim(trailing)
                end if
            end if
            return
        end if
    
        max_row = (OUTPUT_WIDTH-name_width-len(eqs))/(w+len(sep))
        print *, "max_row = ", max_row
        do row=0,4
            write(unit=fmt_str,fmt="(2(A,I0),A)") "(A",name_width,",A",len(eqs),")"
            sep_or_blk = sep
            select case( row )
                case( 0 ) ! Indexes
                    write(unit=*,fmt=fmt_str,advance="no") "idx", eqs
                    if( present( idx_row ) ) then
                        the_row = idx_row
                    else
                        the_row = " "
                        write(unit=fmt_str,fmt="(A,I0,A)") "(I", len(a(1)), ")"
                        do i=1,nb_diff
                            write(unit=the_row(diff_idx(i)),fmt=fmt_str) diff_idx(i)
                        end do
                    end if
                case( 1 )
                    write(unit=*,fmt=fmt_str,advance="no") trim(la_name), eqs
                    the_row = a
                case( 2 )
                    write(unit=*,fmt=fmt_str,advance="no") trim(lb_name), eqs
                    the_row = b
                case( 3 )
                    write(unit=*,fmt=fmt_str,advance="no") "",""
                    the_row = diff_str
                    sep_or_blk = blk
                case( 4 )
                    if( present(extra) ) then
                        if( present(extra_name) ) then
                            write(unit=*,fmt=fmt_str,advance="no") trim(extra_name), eqs
                        else
                            write(unit=*,fmt=fmt_str,advance="no") "", ""
                        end if
                        the_row = extra
                    else
                        exit
                    end if
            end select
        
            idx = 0
            do i=1,min(nb_diff,max_row)
                if( i&gt;1 ) then
                    write(unit=*,fmt="(A)",advance="no") sep_or_blk
                end if
            
                ! Elements in between?
                if( diff_idx(i) &gt; idx+1 ) then
                    write(unit=*,fmt="(2A)",advance="no") ".", sep_or_blk
                end if
            
                ! Element
                idx = diff_idx(i)
                write(unit=*,fmt="(A)",advance="no") the_row(idx)
            end do
            if( nb_diff &gt; max_row ) then
                write(unit=*,fmt="(2A)") sep_or_blk, "..."
            else
                write(unit=*,fmt=*) ! New line
            end if
        end do
    
    end subroutine assert_rank1_report

    subroutine assert_rank2_report( diff, a,b, <xsl:value-of select="$ASSERT_OPTIONS"/>, extra,extra_name, idx_row, recursion )
        logical, dimension(:,:), intent(in) :: diff
        character(len=*), dimension(:,:), intent(in) :: a,b
        character(len=*), dimension(:,:), intent(in), optional :: extra
        character(len=*), intent(in), optional :: extra_name
        character(len=*), dimension(:), intent(in), optional :: idx_row
        logical, intent(in), optional :: recursion
        <xsl:value-of select="$ASSERT_OPTIONS_DECLARATION"/>
    
        character(len=40) :: a_rowstr, b_rowstr, fmt_str
        integer :: row
    
        if( .not. optional_logical( recursion,.false. ) ) then
            call assert_fail( <xsl:value-of select="$ASSERT_OPTIONS"/> )
            write(unit=*,fmt="(2(A,I0),A)") " [??] ", count(diff), " of ", size(diff), " elements differ: "
        end if
    
        do row=1,size(a,1)
            write(unit=*,fmt="(A,100L2)") indent, .not. diff(row,:)
        end do
    
        write(unit=fmt_str,fmt="(A,I0,A)") "(2A,I",ceiling(log10(real(size(a,1)))),",A)"
        do row=1,size(a,1)
            if( any(diff(row,:)) ) then
                write(unit=a_rowstr,fmt=fmt_str) optional_name(a_name,"a"), "(", row, ",:)"
                write(unit=b_rowstr,fmt=fmt_str) optional_name(b_name,"b"), "(", row, ",:)"
                if( present(extra) ) then
                    if( present(extra_name) ) then
                        call assert_report( diff(row,:), a(row,:),b(row,:), a_rowstr,b_rowstr, filename,line,comment, &amp;
                                recursion=.true., extra=extra(row,:), extra_name=extra_name )
                    else
                        call assert_report( diff(row,:), a(row,:),b(row,:), a_rowstr,b_rowstr, filename,line,comment, &amp;
                                recursion=.true., extra=extra(row,:) )
                    end if
                    if( row &lt; size(a,1) ) then
                        write(unit=*,fmt="(A)") repeat("-",len_trim(a_rowstr))
                    end if
                else
                    call assert_report( diff(row,:), a(row,:),b(row,:), a_rowstr,b_rowstr, filename,line,comment, &amp;
                        recursion=.true. )
                end if
            end if
        end do
        write(unit=*,fmt=*) "" ! new line
    
    end subroutine assert_rank2_report

    ! Type bound procedures
<xsl:for-each select="exsl:node-set($ranks)/*[ . &lt; 3]"><xsl:text/>
    subroutine unit_test_error_info_message_rank<xsl:value-of select="."/>( info, message )
        class(unit_test_error_rank<xsl:value-of select="."/>), intent(in) :: info
        character(len=*), intent(out) :: message
        message = "TODO: add message here instead of outputting it straight away ..."
        call assert_rank<xsl:value-of select="."/>_report( info%diff, info%a, info%b, &amp;
                info%a_name,info%b_name,info%filename,info%line ) ! TODO: other arguments?
    end subroutine unit_test_error_info_message_rank<xsl:value-of select="."/>
</xsl:for-each>
	

<xsl:call-template name="procedures"/>

    !--------------------------------------------------------------------------
    ! Miscellaneous
    !--------------------------------------------------------------------------

    function assert_array_shape( shape_a,shape_b, <xsl:value-of select="$ASSERT_OPTIONS"/> ) result( equal_shape )
        integer, dimension(:), intent(in) :: shape_a, shape_b
        <xsl:value-of select="$ASSERT_OPTIONS_DECLARATION"/>
        logical :: equal_shape

        character(len=80) :: message

!        if( any(shape(a) /= shape(b)) ) then
!            write(unit=*,fmt="(A,2(I0,A),2(I0,A))") " [!!] Shape differs: shape(a) := ", &amp; 
!                size(a,1), "x", size(a,2), " /= ", size(b,1), "x", size(b,2), " =: shape(b)"
!            return
!        end if

        equal_shape = .false. 
        if( size(shape_a) /= size(shape_b) ) then
            print *, "different rank"
            return
        end if
        if( any(shape_a /= shape_b) ) then
            call assert_fail( <xsl:value-of select="$ASSERT_OPTIONS"/> )
            return
        end if
        equal_shape = .true.

    end function assert_array_shape

    function optional_name( a, default ) result( name )
        character(len=*), intent(in), optional :: a, default
        character(len=max(len(a),len(default))) :: name

        if( present(a) ) then
            name = a
        else
            if( present(default) ) then
                name = default
            else
                name = ""
            end if
        end if

    end function optional_name

    function optional_logical( a, default )
        logical, intent(in), optional :: a
        logical, intent(in) :: default
        logical :: optional_logical
        if( present(a) ) then
            optional_logical = a
        else
            optional_logical = default
        end if
    end function optional_logical
    
end module error_handling_unit_test<xsl:text/>
	</xsl:template>
	
	<!-- TEMPLATES -->

	<xsl:template match="assert_equal">
		<xsl:param name="version"/>
		<xsl:for-each select="exsl:node-set($version)">
			<xsl:variable name="rank"><xsl:value-of select="@rank"/></xsl:variable>
			<xsl:variable name="is">
				<xsl:for-each select="exsl:node-set($ranks)/*[ 0 &lt; . and . &lt;= $rank]">
					<xsl:text/><xsl:if test=". &gt; 1">,</xsl:if>i<xsl:value-of select="."/><xsl:text/>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="condition">
				<xsl:choose>
					<xsl:when test="@type = 'logical'">
						<xsl:text>a .eqv. b</xsl:text>
					</xsl:when>
					<xsl:otherwise>
						<xsl:text>a == b</xsl:text>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
	subroutine <xsl:call-template name="name-mangler"/>( a, b, <xsl:value-of select="$ASSERT_OPTIONS"/> )
		<xsl:value-of select="@type"/><xsl:call-template name="rank-specification"/>, intent(in) :: a,b<xsl:text/>
		<xsl:value-of select="$ASSERT_OPTIONS_DECLARATION"/>
		character(len=<xsl:call-template name="type-width"/>)<xsl:call-template name="rank-specification-equal"/>
		<xsl:text/> :: a_str, b_str<xsl:text/>
		<xsl:if test="$rank &gt; 0"><xsl:text/>
		integer :: <xsl:value-of select="$is"/>
		</xsl:if>
		type(unit_test_error_rank<xsl:value-of select="$rank"/>) :: info

		<xsl:call-template name="assert-array-shape"/>
		if( <xsl:if test="$rank &gt; 0">all( </xsl:if><xsl:value-of select="$condition"/><xsl:if test="$rank &gt; 0"> )</xsl:if> ) then
			call assert_success( <xsl:value-of select="$ASSERT_OPTIONS"/> )
		else<xsl:text/>
			<xsl:choose>
				<xsl:when test="$rank = 0">
			write(unit=a_str,fmt="(<xsl:call-template name="type-format"/>)") a
			write(unit=b_str,fmt="(<xsl:call-template name="type-format"/>)") b<xsl:text/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:for-each select="exsl:node-set($ranks)/*[ 0 &lt; . and . &lt;= $rank]">
			do i<xsl:value-of select="."/>=1,size(a,<xsl:value-of select="."/>)<xsl:text/>
					</xsl:for-each>
				write(unit=a_str(<xsl:value-of select="$is"/>),fmt="(<xsl:call-template name="type-format"/>)") a(<xsl:value-of select="$is"/>)
				write(unit=b_str(<xsl:value-of select="$is"/>),fmt="(<xsl:call-template name="type-format"/>)") b(<xsl:value-of select="$is"/>)<xsl:text/>
					<xsl:for-each select="exsl:node-set($ranks)/*[ 0 &lt; . and . &lt;= $rank]">
			end do<xsl:text/>
					</xsl:for-each>
				</xsl:otherwise>
			</xsl:choose>
			
			<xsl:call-template name="assert-options-typeassignment">
				<xsl:with-param name="condition" select="$condition"/>
			</xsl:call-template>
			call create_error( ifail, info )
!			call assert_report( .not. ( <xsl:value-of select="$condition"/> ), a_str, b_str, <xsl:value-of select="$ASSERT_OPTIONS"/> )
		end if
	end subroutine <xsl:call-template name="name-mangler"/>
		</xsl:for-each>
	</xsl:template>
	
	<xsl:template match="abserr">
		<xsl:param name="version"/>
		<xsl:for-each select="exsl:node-set($version)">
			<xsl:variable name="rank"><xsl:value-of select="@rank"/></xsl:variable>
	function <xsl:call-template name="name-mangler"/>( a,b ) result( abs_err )
		<xsl:value-of select="@type"/><xsl:call-template name="rank-specification"/>, intent(in) :: a
		<xsl:value-of select="@type"/><xsl:call-template name="rank-specification-equal"/>, intent(in) :: b
		<xsl:value-of select="@type"/><xsl:call-template name="rank-specification-equal"/> :: abs_err<xsl:text/>
		<xsl:choose>
			<xsl:when test="@rank = 0">
        if( a/=b ) then
            abs_err = abs(a-b)
        else
            abs_err = 0
        end if
			</xsl:when>
			<xsl:otherwise>
        where( a/=b )
            abs_err = abs(a-b)
        elsewhere
            abs_err = 0
        end where
		    </xsl:otherwise>
		</xsl:choose>
	end function <xsl:call-template name="name-mangler"/>
		</xsl:for-each>
	</xsl:template>

	<xsl:template match="assert_abserr">
		<xsl:param name="version"/>
		<xsl:call-template name="assert_err">
			<xsl:with-param name="version" select="$version"/>
			<xsl:with-param name="error_f">abserr</xsl:with-param>
			<xsl:with-param name="err_tol">epsabs</xsl:with-param>
		</xsl:call-template>
	</xsl:template>
	<xsl:template match="assert_relerr">
		<xsl:param name="version"/>
		<xsl:call-template name="assert_err">
			<xsl:with-param name="version" select="$version"/>
			<xsl:with-param name="error_f">abserr</xsl:with-param>
			<xsl:with-param name="err_tol">epsabs</xsl:with-param>
		</xsl:call-template>
	</xsl:template>
	
	<xsl:template name="assert_err">
		<xsl:param name="version"/>
		<xsl:param name="error_f"/>
		<xsl:param name="err_tol"/>
		<xsl:for-each select="exsl:node-set($version)">
			<xsl:variable name="rank"><xsl:value-of select="@rank"/></xsl:variable>
			<xsl:variable name="is">
				<xsl:for-each select="exsl:node-set($ranks)/*[ 0 &lt; . and . &lt;= $rank]">
					<xsl:text/><xsl:if test=". &gt; 1">,</xsl:if>i<xsl:value-of select="."/><xsl:text/>
				</xsl:for-each>
			</xsl:variable>
	subroutine <xsl:call-template name="name-mangler"/>( a, b, <xsl:value-of select="$err_tol"/>, <xsl:value-of select="$ASSERT_OPTIONS"/> )
		<xsl:value-of select="@type"/><xsl:call-template name="rank-specification"/>, intent(in) :: a,b
		<xsl:value-of select="@type"/>, intent(in) :: <xsl:value-of select="$err_tol"/><xsl:text/>
		<xsl:value-of select="$ASSERT_OPTIONS_DECLARATION"/>
		character(len=<xsl:call-template name="type-width"/>)<xsl:text/>
		<xsl:if test="$rank &gt; 0">
			<xsl:text/>, dimension(<xsl:text/>
			<xsl:for-each select="exsl:node-set($ranks)/*[ 0 &lt; . and . &lt;= $rank]">
				<xsl:text/><xsl:if test=". &gt; 1">,</xsl:if>size(a,<xsl:value-of select="."/>)<xsl:text/>
			</xsl:for-each>)<xsl:text/>
		</xsl:if>
		<xsl:text/> :: a_str, b_str, e_str
		<xsl:value-of select="@type"/><xsl:call-template name="rank-specification-equal"/> :: e<xsl:text/>
		<xsl:if test="$rank &gt; 0"><xsl:text/>
		integer :: <xsl:value-of select="$is"/>
		</xsl:if>

		<xsl:call-template name="assert-array-shape"/>
		e = <xsl:value-of select="$error_f"/>(a,b)
		if( <xsl:if test="$rank &gt; 0">all( </xsl:if>e &lt;= <xsl:value-of select="$err_tol"/><xsl:if test="$rank &gt; 0"> )</xsl:if> ) then
			call assert_success( <xsl:value-of select="$ASSERT_OPTIONS"/> )
		else<xsl:text/>
			<xsl:choose>
				<xsl:when test="$rank = 0">
			write(unit=a_str,fmt="(<xsl:call-template name="type-format"/>)") a
			write(unit=b_str,fmt="(<xsl:call-template name="type-format"/>)") b<xsl:text/>
			write(unit=e_str,fmt="(<xsl:call-template name="type-format"/>)") e<xsl:text/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:for-each select="exsl:node-set($ranks)/*[ 0 &lt; . and . &lt;= $rank]">
			do i<xsl:value-of select="."/>=1,size(a,<xsl:value-of select="."/>)<xsl:text/>
					</xsl:for-each>
				write(unit=a_str(<xsl:value-of select="$is"/>),fmt="(<xsl:call-template name="type-format"/>)") a(<xsl:value-of select="$is"/>)
				write(unit=b_str(<xsl:value-of select="$is"/>),fmt="(<xsl:call-template name="type-format"/>)") b(<xsl:value-of select="$is"/>)
				write(unit=e_str(<xsl:value-of select="$is"/>),fmt="(<xsl:call-template name="type-format"/>)") e(<xsl:value-of select="$is"/>)<xsl:text/>
					<xsl:for-each select="exsl:node-set($ranks)/*[ 0 &lt; . and . &lt;= $rank]">
			end do<xsl:text/>
					</xsl:for-each>
				</xsl:otherwise>
			</xsl:choose>
			call assert_report( e > <xsl:value-of select="$err_tol"/>, a_str, b_str, <xsl:value-of select="$ASSERT_OPTIONS"/>, &amp;
					extra=e_str, extra_name="<xsl:value-of select="$error_f"/>" )
		end if
	end subroutine <xsl:call-template name="name-mangler"/>
		</xsl:for-each>
	</xsl:template>


	<xsl:template match="relerr">
		<xsl:param name="version"/>
		<xsl:for-each select="exsl:node-set($version)">
			<xsl:variable name="rank"><xsl:value-of select="@rank"/></xsl:variable>
	function <xsl:call-template name="name-mangler"/>( a,b ) result( rel_err )
		<xsl:value-of select="@type"/><xsl:call-template name="rank-specification"/>, intent(in) :: a
		<xsl:value-of select="@type"/><xsl:call-template name="rank-specification-equal"/>, intent(in) :: b
		<xsl:value-of select="@type"/><xsl:call-template name="rank-specification-equal"/> :: rel_err<xsl:text/>
		<xsl:choose>
			<xsl:when test="@rank = 0">
        if( a/=b ) then
            rel_err = abs((a-b)/a)
        else
            rel_err = 0
        end if
			</xsl:when>
			<xsl:otherwise>
        where( a/=b )
            rel_err = abs((a-b)/a)
        elsewhere
            rel_err = 0
        end where
		    </xsl:otherwise>
		</xsl:choose>

	end function <xsl:call-template name="name-mangler"/>
		</xsl:for-each>
	</xsl:template>
	
	
	
	<xsl:template name="assert-array-shape">
		<xsl:if test="@rank &gt; 0"><xsl:text/>
		if( .not. assert_array_shape( shape(a),shape(b), <xsl:value-of select="$ASSERT_OPTIONS"/> ) ) then
			return
		end if<xsl:text/>
		</xsl:if>
	</xsl:template>
	
	<xsl:include href="autogenerated.xsl"/>
	
</xsl:stylesheet>