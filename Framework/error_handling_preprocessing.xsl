<?xml version="1.0"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" xmlns:str="http://exslt.org/strings">
	<xsl:output omit-xml-declaration="yes"	method="text"/>

    <xsl:template match="unittest">
// ERROR_HANDLING_PREPROCESSING
// 
//   Collection of macros that simplify the use of the error_handling module.
// 
// HISTORY
// 
//   20111109 KP - Initial version
//   20111110 KP - Ported to auto-generated system
//   <xsl:value-of select="$isoD"/> (KP) - Re-generated (make autogenerated)
// 
// AUTHOR
// 
//   Koen Poppe, Department of Computer Science,
//   Katholieke Universiteit Leuven, Celestijnenlaan 200A,
//   B-3001 Heverlee, Belgium
//   Email: Koen.Poppe@cs.kuleuven.be
//

// Stringification
#define xstr(s) str(s)
#define str(s) #s

<xsl:for-each select="*">
    <xsl:if test="contains(name(.),'assert')">
        <xsl:variable name="name" select="name(.)"/>
// <xsl:value-of select="$name"/>
        <xsl:for-each select="str:split('ensure,require',',')">
            <xsl:variable name="type" select="."/>
            <!-- comment, ifail, statement,a_name,b_name,filename,line,fmt -->
#define __<xsl:value-of select="$type"/><xsl:value-of select="str:replace($name,'assert','')"/>(a,b,...) \
    call <xsl:value-of select="$name"/>( a,b,__VA_ARGS__,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ )
#define __<xsl:value-of select="$type"/><xsl:value-of select="str:replace($name,'assert','')"/>_ifail(a,b,...) \
    call <xsl:value-of select="$name"/>( a,b,__VA_ARGS__,ifail,ab=str(a),bn=str(b),fn=__FILE__,ln=__LINE__ ); \
    if( is_error(ifail) ) return<xsl:text/>
        </xsl:for-each><xsl:text>
</xsl:text>
    </xsl:if>
</xsl:for-each>

    </xsl:template>
</xsl:stylesheet>